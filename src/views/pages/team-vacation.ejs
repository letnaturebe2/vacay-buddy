<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>팀 연차 현황</title>
  <link rel="icon" type="image/png" href="/assets/logo/logo.png">
  <link rel="stylesheet" href="/assets/css/jquery.dataTables.min.css">
  <link rel="stylesheet" href="/assets/css/responsive.dataTables.min.css">
  <link rel="stylesheet" href="/assets/css/fontawesome.min.css">
  <script src="/assets/js/jquery.min.js"></script>
  <script src="/assets/js/jquery.dataTables.min.js"></script>
  <script src="/assets/js/dataTables.responsive.min.js"></script>
  <style>
    <%- commonStyles %>
    
    /* Enhanced body styling */
    body {
      background: linear-gradient(135deg, #eff6ff 0%, #dbeafe 100%);
      min-height: 100vh;
      margin: 0;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    
    /* Enhanced header */
    h1 {
      color: #1e40af;
      text-align: center;
      font-size: 2.5rem;
      font-weight: 700;
      margin: 0 0 30px 0;
      padding: 30px 20px;
      text-shadow: 0 2px 4px rgba(0,0,0,0.1);
      background: linear-gradient(135deg, rgba(255,255,255,0.8) 0%, rgba(255,255,255,0.6) 100%);
      backdrop-filter: blur(10px);
      border-radius: 15px;
      margin-bottom: 40px;
      border: 1px solid rgba(255,255,255,0.3);
    }
    
    h1 i {
      margin-right: 15px;
      background: linear-gradient(45deg, #3b82f6, #1d4ed8);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      filter: drop-shadow(0 2px 4px rgba(0,0,0,0.1));
    }
    
    .team-card {
      background: linear-gradient(135deg, rgba(255,255,255,0.95) 0%, rgba(255,255,255,0.9) 100%);
      border-radius: 20px;
      box-shadow: 
        0 20px 40px rgba(0,0,0,0.1),
        0 0 0 1px rgba(255,255,255,0.3),
        inset 0 1px 0 rgba(255,255,255,0.6);
      padding: 30px;
      margin-bottom: 40px;
      backdrop-filter: blur(20px);
      border: 1px solid rgba(255,255,255,0.2);
      position: relative;
      overflow: hidden;
    }
    
    .team-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 4px;
      background: linear-gradient(90deg, #3b82f6, #1d4ed8, #60a5fa, #2563eb);
      border-radius: 20px 20px 0 0;
    }
    
    .team-card h2 {
      color: #2c3e50;
      font-size: 1.8rem;
      font-weight: 600;
      margin-bottom: 25px;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .team-card h2 i {
      background: linear-gradient(45deg, #3b82f6, #1d4ed8);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      font-size: 1.6rem;
    }
    
    .team-stats {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
      gap: 25px;
      margin-bottom: 20px;
    }
    
    .stat-item {
      text-align: center;
      padding: 25px 20px;
      background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
      border-radius: 16px;
      box-shadow: 
        0 8px 32px rgba(0,0,0,0.1),
        inset 0 1px 0 rgba(255,255,255,0.8);
      border: 1px solid rgba(0,0,0,0.05);
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }
    
    .stat-item::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 3px;
      background: linear-gradient(90deg, #3b82f6, #1d4ed8);
      transform: translateX(-100%);
      transition: transform 0.3s ease;
    }
    
    .stat-item:hover {
      transform: translateY(-2px);
      box-shadow: 
        0 12px 32px rgba(0,0,0,0.15),
        inset 0 1px 0 rgba(255,255,255,0.8);
    }
    
    .stat-item h3 {
      margin-bottom: 15px;
      color: #64748b;
      font-size: 0.9rem;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 1px;
    }
    
    .stat-item .value {
      font-size: 2.2rem;
      font-weight: 800;
      background: linear-gradient(45deg, #3b82f6, #1d4ed8);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      margin-bottom: 10px;
    }
    
    .stat-item .icon {
      font-size: 2.5rem;
      margin-bottom: 15px;
      background: linear-gradient(45deg, #3b82f6, #1d4ed8);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      filter: drop-shadow(0 2px 4px rgba(0,0,0,0.1));
    }
    .status-badge {
      padding: 6px 12px;
      border-radius: 16px;
      font-size: 0.75rem;
      font-weight: 600;
      display: inline-flex;
      align-items: center;
      gap: 4px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      border: 1px solid rgba(255,255,255,0.3);
      backdrop-filter: blur(10px);
      transition: all 0.3s ease;
      white-space: nowrap;
    }
    
    .status-badge:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(0,0,0,0.15);
    }
    
    .status-on-vacation {
      background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
      color: #155724;
      border-color: #c3e6cb;
    }
    
    .status-working {
      background: linear-gradient(135deg, #cce7ff 0%, #b3d9ff 100%);
      color: #004085;
      border-color: #b3d9ff;
    }
    .user-link {
      cursor: pointer;
      transition: background-color 0.2s ease;
      text-decoration: none;
      color: inherit;
    }
    .user-link:hover {
      background-color: #f0f7ff !important;
    }
    
    /* User name cell cursor */
    .user-name-cell {
      cursor: pointer;
      position: relative;
    }
    
    /* User page link button */
    .user-page-btn {
      display: none;
      position: absolute;
      right: 8px;
      top: 50%;
      transform: translateY(-50%);
      background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
      color: white;
      border: none;
      border-radius: 6px;
      padding: 4px 8px;
      font-size: 0.7rem;
      cursor: pointer;
      transition: all 0.2s ease;
      z-index: 10;
      box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3);
    }
    
    .user-page-btn:hover {
      background: linear-gradient(135deg, #2563eb 0%, #1e40af 100%);
      transform: translateY(-50%) translateY(-1px);
      box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
    }
    
    /* Show user page button on hover for desktop */
    @media (min-width: 769px) {
      .user-name-cell:hover .user-page-btn {
        display: inline-block;
      }
    }
    
    /* Always show user page button on mobile */
    @media (max-width: 768px) {
      .user-page-btn {
        display: inline-block;
        position: static;
        transform: none;
        margin-left: auto;
        font-size: 0.65rem;
        padding: 3px 6px;
      }
      
      .user-name-cell {
        display: flex !important;
        align-items: center;
        justify-content: space-between;
        cursor: default;
      }
      
      .user-name-text {
        display: flex;
        align-items: center;
        gap: 6px;
      }
    }
    
    /* Editable DataTable styles */
    .editable-cell {
      cursor: pointer;
      position: relative;
      transition: all 0.2s ease;
      border-radius: 4px;
    }
    .editable-cell.editing .cell-value {
      visibility: hidden;
    }
    .editable-cell:hover {
      background-color: #f5f5f5;
      cursor: text;
    }
    .editable-cell.editing {
      background-color: #f8f9fa;
      transform: none;
    }
    .editable-input {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      padding: 0;
      border: 1px solid #e0e0e0;
      border-radius: 2px;
      text-align: center;
      font-size: inherit;
      font-weight: inherit;
      line-height: inherit;
      background-color: #ffffff;
      outline: none;
      transition: border-color 0.2s ease;
      box-sizing: border-box;
      margin: 0;
    }
    .editable-input:focus {
      border-color: #2196f3;
      box-shadow: none;
    }
    /* Enhanced table styling */
    #teamTable {
      background: white;
      border-radius: 16px;
      overflow: hidden;
      box-shadow: 0 8px 25px rgba(0,0,0,0.1);
      border: 1px solid rgba(255,255,255,0.2);
      width: 100% !important;
    }
    
    #teamTable thead th {
      background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
      color: white;
      padding: 16px 12px !important;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      font-size: 0.85rem;
      border: none !important;
      vertical-align: middle !important;
      height: 50px;
      line-height: 1.2;
    }
    
    #teamTable thead th:first-child {
      border-radius: 0;
    }
    
    #teamTable thead th:last-child {
      border-radius: 0;
    }
    
    #teamTable tbody tr {
      transition: all 0.2s ease;
      border-bottom: 1px solid rgba(0,0,0,0.05);
      height: auto;
    }
    
    #teamTable tbody tr:hover {
      background: linear-gradient(135deg, rgba(59, 130, 246, 0.05) 0%, rgba(29, 78, 216, 0.05) 100%);
    }
    
    #teamTable tbody td {
      padding: 14px 12px !important;
      vertical-align: middle !important;
      border: none !important;
      height: auto !important;
      line-height: 1.4;
    }
    
    .user-name-cell {
      font-weight: 600;
      color: #2c3e50;
      display: flex !important;
      align-items: center;
      gap: 8px;
      min-height: 40px;
    }
    
    .user-name-cell i {
      color: #3b82f6;
      font-size: 1rem;
      flex-shrink: 0;
    }
    
    /* DataTable specific overrides */
    .dataTables_wrapper {
      font-family: inherit;
    }
    
    .dataTables_wrapper .dataTables_length,
    .dataTables_wrapper .dataTables_filter,
    .dataTables_wrapper .dataTables_info,
    .dataTables_wrapper .dataTables_paginate {
      color: #64748b;
      font-size: 0.9rem;
    }
    
    .dataTables_wrapper .dataTables_paginate .paginate_button {
      padding: 8px 12px;
      margin: 0 2px;
      border-radius: 8px;
      border: 1px solid rgba(0,0,0,0.1);
      background: white;
      color: #64748b !important;
    }
    
    .dataTables_wrapper .dataTables_paginate .paginate_button:hover {
      background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%) !important;
      color: white !important;
      border-color: transparent;
    }
    
    .dataTables_wrapper .dataTables_paginate .paginate_button.current {
      background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%) !important;
      color: white !important;
      border-color: transparent;
    }
    
    .dataTables_wrapper .dataTables_filter input {
      border: 2px solid rgba(0,0,0,0.1);
      border-radius: 8px;
      padding: 8px 12px;
      margin-left: 8px;
    }
    
    .dataTables_wrapper .dataTables_filter input:focus {
      outline: none;
      border-color: #3b82f6;
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }
    
    .dataTables_wrapper .dataTables_length select {
      border: 2px solid rgba(0,0,0,0.1);
      border-radius: 8px;
      padding: 6px 10px;
      margin: 0 8px;
    }
    
    .edit-controls {
      margin: 30px 0;
      display: flex;
      gap: 16px;
      flex-wrap: wrap;
      justify-content: center;
    }
    
    .edit-controls button {
      padding: 14px 28px;
      border: none;
      border-radius: 12px;
      cursor: pointer;
      font-weight: 600;
      font-size: 0.95rem;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 10px;
      box-shadow: 0 6px 20px rgba(0,0,0,0.1);
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255,255,255,0.2);
      position: relative;
      overflow: hidden;
    }
    
    .edit-controls button:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 24px rgba(0,0,0,0.15);
    }
    
    .edit-controls button:active {
      transform: translateY(0);
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }
    .btn-edit {
      background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
      color: white;
    }
    .btn-edit:hover {
      background: linear-gradient(135deg, #2563eb 0%, #1e40af 100%);
    }
    .btn-save {
      background: linear-gradient(135deg, #4caf50 0%, #45a049 100%);
      color: white;
    }
    .btn-save:hover {
      background: linear-gradient(135deg, #43a047 0%, #3d8b40 100%);
    }
    .btn-cancel {
      background: linear-gradient(135deg, #757575 0%, #616161 100%);
      color: white;
    }
    .btn-cancel:hover {
      background: linear-gradient(135deg, #616161 0%, #424242 100%);
    }
    .btn-batch-save {
      background: linear-gradient(135deg, #60a5fa 0%, #3b82f6 100%);
      color: white;
    }
    .btn-batch-save:hover {
      background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
    }
    .edit-mode-notice {
      background: linear-gradient(135deg, rgba(76, 175, 80, 0.1) 0%, rgba(139, 195, 74, 0.1) 100%);
      border: 2px solid rgba(76, 175, 80, 0.3);
      color: #2e7d32;
      padding: 20px 24px;
      border-radius: 16px;
      margin-bottom: 30px;
      display: none;
      box-shadow: 
        0 8px 32px rgba(76, 175, 80, 0.15),
        inset 0 1px 0 rgba(255, 255, 255, 0.6);
      font-weight: 600;
      backdrop-filter: blur(10px);
      position: relative;
      overflow: hidden;
    }
    
    .edit-mode-notice::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 3px;
      background: linear-gradient(90deg, #4caf50, #8bc34a);
    }
    
    .edit-mode-notice i {
      margin-right: 12px;
      font-size: 1.2rem;
      color: #4caf50;
    }
    .drag-handle {
      cursor: grab;
      width: 12px;
      height: 12px;
      background: linear-gradient(135deg, #2196f3, #1976d2);
      position: absolute;
      right: 4px;
      bottom: 4px;
      border-radius: 3px;
      display: none;
      opacity: 0;
      transition: opacity 0.2s ease;
      box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }
    .drag-handle:active {
      cursor: grabbing;
    }
    .edit-mode .editable-cell:hover .drag-handle {
      display: block;
      opacity: 1;
    }
    .drag-highlight {
      background: linear-gradient(135deg, #e3f2fd, #f3e5f5) !important;
      border: 2px dashed #2196f3;
      border-radius: 4px;
      animation: pulse 1s infinite;
    }
    @keyframes pulse {
      0% { opacity: 1; }
      50% { opacity: 0.7; }
      100% { opacity: 1; }
    }

    /* Changed cell indicator */
    .editable-cell.changed {
      background: linear-gradient(135deg, #fff3cd, #ffeaa7) !important;
      border-left: 4px solid #ffc107;
      position: relative;
    }
    .editable-cell.changed::after {
      content: '●';
      position: absolute;
      top: 2px;
      right: 2px;
      color: #ff9800;
      font-size: 8px;
      line-height: 1;
    }

    /* Smooth transitions for all editable elements */
    .editable-cell .cell-value {
      transition: all 0.2s ease;
    }
    
    /* User name cell styling when edit mode is active */
    .edit-mode .user-name-cell {
      opacity: 0.7;
      cursor: not-allowed;
    }
    
    /* Custom Modal Styles */
    .custom-modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 9999;
      opacity: 0;
      visibility: hidden;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: opacity 0.3s ease, visibility 0.3s ease;
    }
    .custom-modal.show {
      opacity: 1;
      visibility: visible;
    }
    .modal-content {
      background: linear-gradient(135deg, rgba(255,255,255,0.95) 0%, rgba(255,255,255,0.9) 100%);
      border-radius: 20px;
      padding: 40px;
      max-width: 450px;
      width: 90%;
      box-shadow: 
        0 30px 60px rgba(0, 0, 0, 0.3),
        0 0 0 1px rgba(255,255,255,0.3),
        inset 0 1px 0 rgba(255,255,255,0.6);
      transform: scale(0.9);
      transition: transform 0.3s ease;
      text-align: center;
      backdrop-filter: blur(20px);
      border: 1px solid rgba(255,255,255,0.2);
      position: relative;
      overflow: hidden;
    }
    
    .modal-content::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 4px;
      background: linear-gradient(90deg, #3b82f6, #1d4ed8, #60a5fa, #2563eb);
      border-radius: 20px 20px 0 0;
    }
    
    .custom-modal.show .modal-content {
      transform: scale(1);
    }
    .modal-icon {
      font-size: 48px;
      margin-bottom: 20px;
    }
    .modal-icon.success {
      color: #4caf50;
    }
    .modal-icon.error {
      color: #f44336;
    }
    .modal-icon.warning {
      color: #ff9800;
    }
    .modal-icon.info {
      color: #2196f3;
    }
    .modal-title {
      font-size: 24px;
      font-weight: bold;
      margin-bottom: 15px;
      color: #333;
    }
    .modal-message {
      font-size: 16px;
      color: #666;
      margin-bottom: 25px;
      line-height: 1.5;
    }
    .modal-buttons {
      display: flex;
      gap: 12px;
      justify-content: center;
    }
    .modal-btn {
      padding: 12px 24px;
      border: none;
      border-radius: 8px;
      font-size: 14px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
      min-width: 100px;
    }
    .modal-btn:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }
    .modal-btn.primary {
      background-color: #2196f3;
      color: white;
    }
    .modal-btn.primary:hover {
      background-color: #1976d2;
    }
    .modal-btn.success {
      background-color: #4caf50;
      color: white;
    }
    .modal-btn.success:hover {
      background-color: #45a049;
    }
    .modal-btn.danger {
      background-color: #f44336;
      color: white;
    }
    .modal-btn.danger:hover {
      background-color: #d32f2f;
    }
    .modal-btn.secondary {
      background-color: #757575;
      color: white;
    }
    .modal-btn.secondary:hover {
      background-color: #616161;
    }

    /* Container wrapper */
    .container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 0 20px;
    }
    
    /* Remove floating animation for better performance */
    
    /* Improved mobile responsiveness */
    @media (max-width: 768px) {
      body {
        background-attachment: scroll;
      }
      
      h1 {
        font-size: 2rem;
        padding: 20px 15px;
        margin-bottom: 25px;
      }
      
      .team-card {
        padding: 20px;
        margin-bottom: 25px;
        border-radius: 16px;
      }
      
      .team-stats {
        grid-template-columns: 1fr;
        gap: 15px;
      }
      
      .stat-item {
        padding: 20px 15px;
      }
      
      .stat-item .value {
        font-size: 2rem;
      }
      
      .edit-controls {
        display: none !important;
      }
      
      #teamTable thead th {
        padding: 12px 8px !important;
        font-size: 0.8rem;
        height: 44px;
      }
      
      #teamTable tbody td {
        padding: 12px 8px !important;
        min-height: 44px;
      }
      
      .user-name-cell {
        min-height: 44px;
        gap: 6px;
      }
      
      .user-name-cell i {
        font-size: 0.9rem;
      }
      
      .dtr-details {
        width: 100%;
        background: linear-gradient(135deg, rgba(255,255,255,0.95) 0%, rgba(248,249,250,0.95) 100%);
        border-radius: 12px;
        padding: 15px;
        margin-top: 10px;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(59, 130, 246, 0.1);
        box-shadow: 0 4px 16px rgba(59, 130, 246, 0.1);
      }
      
      .dtr-details li {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px 0;
        border-bottom: 1px solid rgba(0,0,0,0.05);
      }
      
      .dtr-details li:last-child {
        border-bottom: none;
      }
      
      .dtr-title {
        font-weight: 600;
        flex: 1;
        color: #64748b;
        font-size: 0.9rem;
        display: flex;
        align-items: center;
        gap: 8px;
      }
      
      .dtr-title::before {
        content: '▸';
        color: #3b82f6;
        font-weight: bold;
      }
      
      .dtr-data {
        flex: 2;
        text-align: right;
        font-weight: 500;
        color: #2c3e50;
      }
      
      /* Add user page link in mobile details */
      .dtr-details .user-page-link {
        display: inline-block;
        background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
        color: white;
        text-decoration: none;
        padding: 8px 16px;
        border-radius: 8px;
        font-size: 0.85rem;
        font-weight: 600;
        margin-top: 10px;
        transition: all 0.2s ease;
        box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3);
      }
      
      .dtr-details .user-page-link:hover {
        background: linear-gradient(135deg, #2563eb 0%, #1e40af 100%);
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
        color: white;
        text-decoration: none;
      }
      
      .dtr-details .user-page-link i {
        margin-right: 6px;
      }
      
      .modal-content {
        padding: 25px;
        border-radius: 16px;
      }
      
      .modal-buttons {
        flex-direction: column;
        gap: 10px;
      }
      
      .modal-btn {
        width: 100%;
        padding: 14px;
      }
      
      .edit-mode-notice {
        display: none !important;
      }
      
      .status-badge {
        padding: 4px 8px;
        font-size: 0.7rem;
        gap: 3px;
        border-radius: 12px;
      }
    }
    
    @media (max-width: 480px) {
      .container {
        padding: 0 15px;
      }
      
      h1 {
        font-size: 1.8rem;
      }
      
      .team-card {
        padding: 15px;
      }
      
      .stat-item .value {
        font-size: 1.8rem;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1><i class="fas fa-users"></i> 팀 연차 현황</h1>
    
    <div class="team-card">
    <h2><i class="fas fa-chart-bar"></i> 팀 요약 정보</h2>
    <div class="team-stats">
      <div class="stat-item">
        <div class="icon"><i class="fas fa-users"></i></div>
        <h3>총 팀원 수</h3>
        <div class="value"><%= users.length %>명</div>
      </div>
      <div class="stat-item">
        <div class="icon"><i class="fas fa-umbrella-beach"></i></div>
        <h3>현재 연차 중</h3>
        <div class="value"><%= onVacationCount %>명</div>
      </div>
    </div>
  </div>
  
  <div class="edit-mode-notice" id="editModeNotice">
    <i class="fas fa-edit"></i> 편집 모드입니다. 연차 일수를 클릭하여 수정하고, 완료 후 저장 버튼을 눌러주세요.
  </div>

  <div class="edit-controls">
    <button class="btn-edit" id="toggleEditBtn" onclick="toggleEditMode()">
      <i class="fas fa-edit"></i> 편집 모드
    </button>
    <button class="btn-batch-save" id="batchSaveBtn" onclick="saveAllChanges()" style="display: none;">
      <i class="fas fa-save"></i> 모든 변경사항 저장
    </button>
    <button class="btn-cancel" id="cancelEditBtn" onclick="cancelEditMode()" style="display: none;">
      <i class="fas fa-times"></i> 편집 취소
    </button>
  </div>

  <div class="team-card">
    <table id="teamTable" class="display responsive nowrap" style="width:100%">
      <thead>
        <tr>
          <th>이름</th>
          <th>연간 연차 일수</th>
          <th>사용한 연차 일수</th>
          <th>남은 연차 일수</th>
          <th>현재 상태</th>
        </tr>
      </thead>
      <tbody>
        <% users.forEach(function(user) { %>
          <% const isOnVacation = onVacationUsers.has(user.userId); %>
          <tr class="member-row" data-user-id="<%= user.userId %>">
            <td class="user-name-cell">
              <span class="user-name-text">
                <i class="fas fa-user"></i> <%= user.name || `<@${user.userId}>` %>
              </span>
              <button class="user-page-btn" onclick="event.stopPropagation(); window.open('/user-vacation-html?token=<%= user.userToken %>', '_blank')">
                <i class="fas fa-external-link-alt"></i> 상세
              </button>
            </td>
            <td class="editable-cell annual-days" data-field="annualPtoDays" data-original="<%= user.annualPtoDays %>">
              <span class="cell-value"><%= user.annualPtoDays %>일</span>
              <div class="drag-handle"></div>
            </td>
            <td class="editable-cell used-days" data-field="usedPtoDays" data-original="<%= user.usedPtoDays %>">
              <span class="cell-value"><%= user.usedPtoDays %>일</span>
              <div class="drag-handle"></div>
            </td>
            <td class="remaining-days">
              <span class="cell-value"><%= user.annualPtoDays - user.usedPtoDays %>일</span>
            </td>
            <td class="status-cell">
              <span class="status-badge <%= isOnVacation ? 'status-on-vacation' : 'status-working' %>">
                <%= isOnVacation ? '🏖️ 연차 중' : '🏢 근무 중' %>
              </span>
            </td>
          </tr>
        <% }); %>
      </tbody>
    </table>
  </div>

  <!-- Custom Modal -->
  <div id="customModal" class="custom-modal">
    <div class="modal-content">
      <div id="modalIcon" class="modal-icon"></div>
      <div id="modalTitle" class="modal-title"></div>
      <div id="modalMessage" class="modal-message"></div>
      <div id="modalButtons" class="modal-buttons"></div>
    </div>
  </div>

  <script>
    let isEditMode = false;
    let originalData = {};
    let pendingChanges = {};
    
    // Use the token passed from the server
    function getAuthToken() {
      return '<%= token %>';
    }

    // Custom Modal Functions
    function showModal(options) {
      const {
        type = 'info',
        title = '알림',
        message = '',
        buttons = [{ text: '확인', class: 'primary', callback: null }],
        onClose = null
      } = options;

      const modal = document.getElementById('customModal');
      const modalIcon = document.getElementById('modalIcon');
      const modalTitle = document.getElementById('modalTitle');
      const modalMessage = document.getElementById('modalMessage');
      const modalButtons = document.getElementById('modalButtons');

      // Set icon based on type
      const icons = {
        success: 'fas fa-check-circle',
        error: 'fas fa-exclamation-circle',
        warning: 'fas fa-exclamation-triangle',
        info: 'fas fa-info-circle'
      };

      modalIcon.className = `modal-icon ${type}`;
      modalIcon.innerHTML = `<i class="${icons[type]}"></i>`;
      modalTitle.textContent = title;
      modalMessage.innerHTML = message.replace(/\n/g, '<br>');

      // Clear previous buttons
      modalButtons.innerHTML = '';

      // Add buttons
      buttons.forEach(button => {
        const btn = document.createElement('button');
        btn.className = `modal-btn ${button.class || 'primary'}`;
        btn.textContent = button.text;
        btn.onclick = () => {
          hideModal();
          if (button.callback) {
            button.callback();
          }
        };
        modalButtons.appendChild(btn);
      });

      // Show modal
      modal.classList.add('show');

      // Close on background click
      modal.onclick = (e) => {
        if (e.target === modal) {
          hideModal();
          if (onClose) onClose();
        }
      };
    }

    function hideModal() {
      const modal = document.getElementById('customModal');
      modal.classList.remove('show');
    }

    function showSuccessModal(message, callback = null) {
      showModal({
        type: 'success',
        title: '성공',
        message: message,
        buttons: [{ text: '확인', class: 'success', callback }]
      });
    }

    function showErrorModal(message, callback = null) {
      showModal({
        type: 'error',
        title: '오류',
        message: message,
        buttons: [{ text: '확인', class: 'danger', callback }]
      });
    }

    function showWarningModal(message, callback = null) {
      showModal({
        type: 'warning',
        title: '경고',
        message: message,
        buttons: [{ text: '확인', class: 'primary', callback }]
      });
    }

    function showConfirmModal(message, onConfirm, onCancel = null) {
      showModal({
        type: 'warning',
        title: '확인',
        message: message,
        buttons: [
          { text: '취소', class: 'secondary', callback: onCancel },
          { text: '확인', class: 'danger', callback: onConfirm }
        ]
      });
    }

    $(document).ready(function() {
      // Initialize DataTables with mobile-optimized settings
      $('#teamTable').DataTable({
        language: {
          url: '/assets/i18n/ko.json'
        },
        responsive: {
          details: {
            display: $.fn.dataTable.Responsive.display.childRowImmediate,
            type: '',
            renderer: function (api, rowIdx, columns) {
              var data = $.map(columns, function (col, i) {
                return col.hidden ?
                  '<li>' +
                  '<span class="dtr-title">' + col.title + '</span> ' +
                  '<span class="dtr-data">' + col.data + '</span>' +
                  '</li>' :
                  '';
              }).join('');
              
              
              return data ? $('<ul class="dtr-details"/>').append(data) : false;
            }
          }
        },
        order: [[4, 'asc'], [0, 'asc']], // Sort by status first, then by name
        pageLength: 10,
        autoWidth: false,
        columnDefs: [
          { responsivePriority: 1, targets: [0, 4] }, // Name and status always visible
          { responsivePriority: 2, targets: [2, 3] }, // Used and remaining days second priority
          { responsivePriority: 3, targets: [1] }     // Annual days third priority
        ]
      });

      // Store original data
      $('.editable-cell').each(function() {
        const userId = $(this).closest('tr').data('user-id');
        const field = $(this).data('field');
        const value = parseInt($(this).data('original'));
        
        if (!originalData[userId]) {
          originalData[userId] = {};
        }
        originalData[userId][field] = value;
      });

      // Show installation welcome modal if coming from installation
      <% if (isFromInstallation) { %>
      setTimeout(() => {
        showModal({
          type: 'success',
          title: '🎉 설치 완료!',
          message: '이름을 클릭하면 개별 연차 상세 정보를 볼 수 있습니다.\n <b>편집 모드</b>를 통해 연차 일수를 수정할 수도 있습니다.',
          buttons: [
            { text: '시작하기', class: 'success', callback: null }
          ]
        });
      }, 500);
      <% } %>
    });

    function toggleEditMode() {
      isEditMode = !isEditMode;
      
      if (isEditMode) {
        enterEditMode();
      } else {
        exitEditMode();
      }
    }

    function enterEditMode() {
      $('#editModeNotice').show();
      $('#toggleEditBtn').text('편집 종료').removeClass('btn-edit').addClass('btn-cancel');
      $('#batchSaveBtn, #cancelEditBtn').show();
      
      // Add edit mode class to body
      $('body').addClass('edit-mode');
      
      // Disable row click navigation
      $('.user-name-cell').css('pointer-events', 'none');
      
      // Make cells editable
      $('.editable-cell').on('click', function(e) {
        e.stopPropagation();
        editCell(this);
      });

      // Enable drag to fill
      setupDragToFill();
    }

    function exitEditMode() {
      $('#editModeNotice').hide();
      $('#toggleEditBtn').text('편집 모드').removeClass('btn-cancel').addClass('btn-edit');
      $('#batchSaveBtn, #cancelEditBtn').hide();
      
      // Remove edit mode class from body
      $('body').removeClass('edit-mode');
      
      // Re-enable row click navigation
      $('.user-name-cell').css('pointer-events', 'auto');
      
      // Remove edit handlers
      $('.editable-cell').off('click');
      $('.editable-cell').removeClass('editing changed');
      
      // Clear any active inputs
      $('.editable-input').remove();
      
      isEditMode = false;
    }

    function editCell(cell) {
      if ($(cell).hasClass('editing')) return;
      
      const $cell = $(cell);
      const currentValue = parseInt($cell.data('original'));
      const $span = $cell.find('.cell-value');
      
      $cell.addClass('editing');
      
      const $input = $('<input type="number" class="editable-input" min="0">');
      $input.val(currentValue);
      
      $cell.append($input);
      $input.focus().select();
      
      $input.on('blur keypress', function(e) {
        if (e.type === 'keypress' && e.which !== 13) return;
        
        const newValue = parseInt($input.val()) || 0;
        const userId = $cell.closest('tr').data('user-id');
        const field = $cell.data('field');
        
        // Store change
        if (!pendingChanges[userId]) {
          pendingChanges[userId] = {};
        }
        pendingChanges[userId][field] = newValue;
        
        // Update display
        $span.text(newValue + '일');
        $input.remove();
        $cell.removeClass('editing');
        $cell.data('original', newValue);
        
        // Update remaining days if needed
        updateRemainingDays(userId);
        
        // Visual feedback for changed cells
        if (newValue !== originalData[userId][field]) {
          $cell.addClass('changed');
        } else {
          $cell.removeClass('changed');
        }
      });
    }

    function updateRemainingDays(userId) {
      const $row = $(`tr[data-user-id="${userId}"]`);
      const annual = parseInt($row.find('.annual-days').data('original'));
      const used = parseInt($row.find('.used-days').data('original'));
      const remaining = annual - used;
      
      $row.find('.remaining-days .cell-value').text(remaining + '일');
    }

    function setupDragToFill() {
      let dragStartCell = null;
      
      $('.drag-handle').on('mousedown', function(e) {
        e.preventDefault();
        dragStartCell = $(this).parent();
        $(document).on('mousemove', onDragMove);
        $(document).on('mouseup', onDragEnd);
      });
      
      function onDragMove(e) {
        // Highlight cells being dragged over
        const elementBelow = document.elementFromPoint(e.clientX, e.clientY);
        const $targetCell = $(elementBelow).closest('.editable-cell');
        
        if ($targetCell.length && $targetCell.data('field') === dragStartCell.data('field')) {
          $('.drag-highlight').removeClass('drag-highlight');
          $targetCell.addClass('drag-highlight');
        }
      }
      
      function onDragEnd(e) {
        const elementBelow = document.elementFromPoint(e.clientX, e.clientY);
        const $targetCell = $(elementBelow).closest('.editable-cell');
        
        if ($targetCell.length && $targetCell.data('field') === dragStartCell.data('field')) {
          const sourceValue = parseInt(dragStartCell.data('original'));
          
          // Fill selected range
          const sourceIndex = dragStartCell.closest('tr').index();
          const targetIndex = $targetCell.closest('tr').index();
          const startIndex = Math.min(sourceIndex, targetIndex);
          const endIndex = Math.max(sourceIndex, targetIndex);
          
          for (let i = startIndex; i <= endIndex; i++) {
            const $row = $('#teamTable tbody tr').eq(i);
            const $cell = $row.find(`[data-field="${dragStartCell.data('field')}"]`);
            const userId = $row.data('user-id');
            
            if (!pendingChanges[userId]) {
              pendingChanges[userId] = {};
            }
            pendingChanges[userId][$cell.data('field')] = sourceValue;
            
            $cell.data('original', sourceValue);
            $cell.find('.cell-value').text(sourceValue + '일');
            $cell.addClass('changed');
            
            updateRemainingDays(userId);
          }
        }
        
        $('.drag-highlight').removeClass('drag-highlight');
        $(document).off('mousemove mouseup');
        dragStartCell = null;
      }
    }

    async function saveAllChanges() {
      if (Object.keys(pendingChanges).length === 0) {
        showWarningModal('변경사항이 없습니다.');
        return;
      }

      const token = getAuthToken();
      if (!token) {
        showErrorModal('인증 토큰을 찾을 수 없습니다.');
        return;
      }
      
      const updates = [];
      for (const userId in pendingChanges) {
        const userChanges = pendingChanges[userId];
        const currentData = originalData[userId];
        
        updates.push({
          userId: userId,
          annualPtoDays: userChanges.annualPtoDays !== undefined ? userChanges.annualPtoDays : currentData.annualPtoDays,
          usedPtoDays: userChanges.usedPtoDays !== undefined ? userChanges.usedPtoDays : currentData.usedPtoDays
        });
      }

      try {
        $('#batchSaveBtn').prop('disabled', true).text('저장 중...');
        
        const response = await fetch(`/api/vacation?token=${token}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ updates })
        });
        
        const result = await response.json();
        debugger;
        if (response.ok) {
          // Success case - all updates succeeded
          const successCount = result.results.length;
          
          const successMessage = result.message || `${successCount}명의 사용자에 대한 연차 정보가 성공적으로 업데이트되었습니다.`;
          
          showSuccessModal(successMessage, () => {
            // Update original data for all successful updates
            result.results.forEach(item => {
              originalData[item.userId] = {
                annualPtoDays: item.user.annualPtoDays,
                usedPtoDays: item.user.usedPtoDays
              };
            });
            
            // Clear pending changes and visual indicators
            pendingChanges = {};
            $('.editable-cell').removeClass('changed');
            
            exitEditMode();
            
            // Reload page to reflect changes
            setTimeout(() => {
              window.location.reload();
            }, 1000);
          });
        } else {
          // Error case - use message field from error response
          const errorMessage = result.message || result.error || '알 수 없는 오류가 발생했습니다';
          showErrorModal(`저장 중 오류가 발생했습니다: ${errorMessage}`);
        }
      } catch (error) {
        console.error('Save error:', error);
        if (error.name === 'TypeError' && error.message.includes('fetch')) {
          showErrorModal('서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요.');
        } else {
          showErrorModal(`저장 중 오류가 발생했습니다: ${error.message || '알 수 없는 오류'}`);
        }
      } finally {
        $('#batchSaveBtn').prop('disabled', false).text('모든 변경사항 저장');
      }
    }

    function cancelEditMode() {
      if (Object.keys(pendingChanges).length > 0) {
        showConfirmModal('변경사항이 있습니다. 정말 취소하시겠습니까?', () => {
          // Restore original values
          for (const userId in pendingChanges) {
            const $row = $(`tr[data-user-id="${userId}"]`);
            
            for (const field in pendingChanges[userId]) {
              const originalValue = originalData[userId][field];
              const $cell = $row.find(`[data-field="${field}"]`);
              
              $cell.data('original', originalValue);
              $cell.find('.cell-value').text(originalValue + '일');
              $cell.removeClass('changed');
            }
            
            updateRemainingDays(userId);
          }
          
          pendingChanges = {};
          exitEditMode();
        });
      } else {
        exitEditMode();
      }
    }
  </script>
  </div>
</body>
</html> 