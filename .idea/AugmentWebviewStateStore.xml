<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AugmentWebviewStateStore">
    <option name="stateMap">
      <map>
        <entry key="CHAT_STATE" value="{&quot;currentConversationId&quot;:&quot;a274dfa6-0ff6-4fed-9f8c-b27fd7124a85&quot;,&quot;conversations&quot;:{&quot;a274dfa6-0ff6-4fed-9f8c-b27fd7124a85&quot;:{&quot;id&quot;:&quot;a274dfa6-0ff6-4fed-9f8c-b27fd7124a85&quot;,&quot;createdAtIso&quot;:&quot;2025-06-22T12:49:19.405Z&quot;,&quot;lastInteractedAtIso&quot;:&quot;2025-06-22T13:18:14.436Z&quot;,&quot;chatHistory&quot;:[{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;72dcb832-f090-4338-adf2-1d0a9930e149&quot;,&quot;request_message&quot;:&quot;    \&quot;migration:generate\&quot;: \&quot;ts-node --require dotenv/config ./node_modules/typeorm/cli.js migration:generate src/migration/migration/ -d src/db.ts\&quot;,\n    \&quot;migration:run\&quot;: \&quot;ts-node --require dotenv/config ./node_modules/typeorm/cli.js migration:run -d src/db.ts\&quot;\n\n\n테스트 환경에서 generate해서 만들고 Run해서 테스트 디비엔 저장하는데 실제로 Prod환경에선 언제 migrate하는 것이 적절할까?&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    \&quot;migration:generate\&quot;: \&quot;ts-node --require dotenv/config ./node_modules/typeorm/cli.js migration:generate src/migration/migration/ -d src/db.ts\&quot;,&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    \&quot;migration:run\&quot;: \&quot;ts-node --require dotenv/config ./node_modules/typeorm/cli.js migration:run -d src/db.ts\&quot;&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;테스트 환경에서 generate해서 만들고 Run해서 테스트 디비엔 저장하는데 실제로 Prod환경에선 언제 migrate하는 것이 적절할까?&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;프로덕션 환경에서 마이그레이션을 실행하는 적절한 시점은 다음과 같습니다:\n\n1. **배포 프로세스의 일부로**: CI/CD 파이프라인에서 애플리케이션 배포 직전에 마이그레이션을 실행하는 것이 일반적입니다. 이는 `cloudbuild.yaml`에 마이그레이션 단계를 추가하여 구현할 수 있습니다.\n\n2. **다운타임 최소화 전략**:\n   - 하위 호환성 있는 마이그레이션: 애플리케이션 배포 전에 실행\n   - 복잡한 마이그레이션: 유지보수 시간에 실행하거나 블루-그린 배포 전략 사용\n\n3. **스크립트 예시**:\n\n&lt;augment_code_snippet path=\&quot;package.json\&quot; mode=\&quot;EDIT\&quot;&gt;\n```json\n\&quot;scripts\&quot;: {\n  \&quot;migration:prod\&quot;: \&quot;ts-node --require dotenv/config ./node_modules/typeorm/cli.js migration:run -d src/db.ts\&quot;,\n  \&quot;deploy:prod\&quot;: \&quot;npm run build &amp;&amp; npm run migration:prod &amp;&amp; node ./dist/src/app-prod.js\&quot;\n}\n```\n&lt;/augment_code_snippet&gt;\n\n4. **Cloud Build에 추가하는 방법**:\n\n&lt;augment_code_snippet path=\&quot;cloudbuild.yaml\&quot; mode=\&quot;EDIT\&quot;&gt;\n```yaml\nsteps:\n  # 기존 단계들...\n  \n  # 마이그레이션 실행 단계 추가\n  - name: 'gcr.io/cloud-builders/npm'\n    args: ['run', 'migration:prod']\n    \n  # 서비스 배포 단계\n  - name: 'gcr.io/cloud-builders/gcloud'\n    args: [...]\n```\n&lt;/augment_code_snippet&gt;\n\n프로덕션 환경에서는 항상 마이그레이션 전 데이터베이스 백업을 수행하고, 롤백 계획을 준비하는 것이 중요합니다.\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;package.json:0-787\npackage.json:787-1621\npackage.json:1621-1954\nsrc/migration/1750598110663-migration.ts:0-59\nsrc/migration/1750598110663-migration.ts:59-881\nsrc/app-prod.ts:0-714\nsrc/db.ts:0-290\nsrc/db.ts:290-1121\nsrc/db.ts:1121-1187\nsrc/migration/1745063832591-migration.ts:0-703\nsrc/migration/1745118978340-migration.ts:0-505\nsrc/migration/1744434324806-migration.ts:0-705\nsrc/migration/1744434324806-migration.ts:705-1222\nsrc/migration/1744434324806-migration.ts:1222-1730\nsrc/migration/1744434324806-migration.ts:1730-2304\nsrc/migration/1744434324806-migration.ts:2304-3004\nsrc/migration/1744434324806-migration.ts:3004-3653\nsrc/migration/1744434324806-migration.ts:3653-4087\nsrc/migration/1744434324806-migration.ts:4087-4909\nsrc/migration/1744434324806-migration.ts:4909-5267\ntests/config/test-db.ts:0-313\nREADME.ko.md:2005-2595\nREADME.ko.md:2595-3338\nREADME.md:0-590\nREADME.md:1988-2700\nREADME.md:2700-3282\nREADME.md:3282-3845\nREADME.md:3845-4500\ntests/config/setup.ts:0-215\nsrc/app.ts:0-730\nsrc/app.ts:730-1109\ncloudbuild.yaml:0-844\ncloudbuild.yaml:844-1505\nDockerfile:0-195\n.github/workflows/lint.yml:0-440\n.github/dependabot.yml:0-256\njest.config.js:0-386\nqodana.yaml:0-422\nqodana.yaml:422-988\nbiome.json:0-800\nfirebase.json:0-322\npackage-lock.json:0-651\npackage-lock.json:274238-275160\nsrc/middleware.ts:822-1476\nstart-ngork.sh:0-162\ntsconfig.jest.json:0-307\ntests/service/user.serivce.test.ts:0-397\n.gitignore:0-33&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;    \&quot;migration:generate\&quot;: \&quot;ts-node --require dotenv/config ./node_modules/typeorm/cli.js migration:generate src/migration/migration/ -d src/db.ts\&quot;,\n    \&quot;migration:run\&quot;: \&quot;ts-node --require dotenv/config ./node_modules/typeorm/cli.js migration:run -d src/db.ts\&quot;\n\n\n테스트 환경에서 generate해서 만들고 Run해서 테스트 디비엔 저장하는데 실제로 Prod환경에선 언제 migrate하는 것이 적절할까?&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/user/WebstormProjects/vacay-buddy&quot;,&quot;folderRoot&quot;:&quot;/Users/user/WebstormProjects/vacay-buddy&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-22T13:17:24.960Z&quot;,&quot;response_text&quot;:&quot;프로덕션 환경에서 마이그레이션을 실행하는 적절한 시점은 다음과 같습니다:\n\n1. **배포 프로세스의 일부로**: CI/CD 파이프라인에서 애플리케이션 배포 직전에 마이그레이션을 실행하는 것이 일반적입니다. 이는 `cloudbuild.yaml`에 마이그레이션 단계를 추가하여 구현할 수 있습니다.\n\n2. **다운타임 최소화 전략**:\n   - 하위 호환성 있는 마이그레이션: 애플리케이션 배포 전에 실행\n   - 복잡한 마이그레이션: 유지보수 시간에 실행하거나 블루-그린 배포 전략 사용\n\n3. **스크립트 예시**:\n\n````json path=package.json mode=EDIT\n\&quot;scripts\&quot;: {\n  \&quot;migration:prod\&quot;: \&quot;ts-node --require dotenv/config ./node_modules/typeorm/cli.js migration:run -d src/db.ts\&quot;,\n  \&quot;deploy:prod\&quot;: \&quot;npm run build &amp;&amp; npm run migration:prod &amp;&amp; node ./dist/src/app-prod.js\&quot;\n}\n````\n\n4. **Cloud Build에 추가하는 방법**:\n\n````yaml path=cloudbuild.yaml mode=EDIT\nsteps:\n  # 기존 단계들...\n  \n  # 마이그레이션 실행 단계 추가\n  - name: 'gcr.io/cloud-builders/npm'\n    args: ['run', 'migration:prod']\n    \n  # 서비스 배포 단계\n  - name: 'gcr.io/cloud-builders/gcloud'\n    args: [...]\n````\n\n프로덕션 환경에서는 항상 마이그레이션 전 데이터베이스 백업을 수행하고, 롤백 계획을 준비하는 것이 중요합니다.\n&quot;,&quot;workspace_file_chunks&quot;:[{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;787&quot;,&quot;blob_name&quot;:&quot;d120785b8a2760680b2d37e9613c318ee74b53e71868a028525e8b429e877f83&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;package.json&quot;}},{&quot;char_start&quot;:&quot;787&quot;,&quot;char_end&quot;:&quot;1621&quot;,&quot;blob_name&quot;:&quot;d120785b8a2760680b2d37e9613c318ee74b53e71868a028525e8b429e877f83&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;package.json&quot;}},{&quot;char_start&quot;:&quot;1621&quot;,&quot;char_end&quot;:&quot;1954&quot;,&quot;blob_name&quot;:&quot;d120785b8a2760680b2d37e9613c318ee74b53e71868a028525e8b429e877f83&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;package.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;59&quot;,&quot;blob_name&quot;:&quot;9ee96ec0d7d948a8082c8129a9faa6a6c62757930f72d749a443cc96c95dc4e0&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/migration/1750598110663-migration.ts&quot;}},{&quot;char_start&quot;:&quot;59&quot;,&quot;char_end&quot;:&quot;881&quot;,&quot;blob_name&quot;:&quot;9ee96ec0d7d948a8082c8129a9faa6a6c62757930f72d749a443cc96c95dc4e0&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/migration/1750598110663-migration.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;714&quot;,&quot;blob_name&quot;:&quot;2797f9f2d7104d45db1656af07e66999ed3eae6d2ee46f6b055bf5f1138ceb82&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/app-prod.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;290&quot;,&quot;blob_name&quot;:&quot;ebf22249fa66f35151e4eaf4a3cc539ebbd04d66c7d1b270c254413a0d43e4c4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/db.ts&quot;}},{&quot;char_start&quot;:&quot;290&quot;,&quot;char_end&quot;:&quot;1121&quot;,&quot;blob_name&quot;:&quot;ebf22249fa66f35151e4eaf4a3cc539ebbd04d66c7d1b270c254413a0d43e4c4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/db.ts&quot;}},{&quot;char_start&quot;:&quot;1121&quot;,&quot;char_end&quot;:&quot;1187&quot;,&quot;blob_name&quot;:&quot;ebf22249fa66f35151e4eaf4a3cc539ebbd04d66c7d1b270c254413a0d43e4c4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/db.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;703&quot;,&quot;blob_name&quot;:&quot;b37ba129f36ef9c915ac600806a5d3a387cc023d9c5993a905d878bea53f85b5&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/migration/1745063832591-migration.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;505&quot;,&quot;blob_name&quot;:&quot;e12679f055f3b0814bfe0c2ee5291e51e41d7f57c869cfb049a0b51a32918d22&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/migration/1745118978340-migration.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;705&quot;,&quot;blob_name&quot;:&quot;267da1ab75cef874857aaa739a372ce459f94f43e8ab00cab1cd4bd5818b8a5d&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/migration/1744434324806-migration.ts&quot;}},{&quot;char_start&quot;:&quot;705&quot;,&quot;char_end&quot;:&quot;1222&quot;,&quot;blob_name&quot;:&quot;267da1ab75cef874857aaa739a372ce459f94f43e8ab00cab1cd4bd5818b8a5d&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/migration/1744434324806-migration.ts&quot;}},{&quot;char_start&quot;:&quot;1222&quot;,&quot;char_end&quot;:&quot;1730&quot;,&quot;blob_name&quot;:&quot;267da1ab75cef874857aaa739a372ce459f94f43e8ab00cab1cd4bd5818b8a5d&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/migration/1744434324806-migration.ts&quot;}},{&quot;char_start&quot;:&quot;1730&quot;,&quot;char_end&quot;:&quot;2304&quot;,&quot;blob_name&quot;:&quot;267da1ab75cef874857aaa739a372ce459f94f43e8ab00cab1cd4bd5818b8a5d&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/migration/1744434324806-migration.ts&quot;}},{&quot;char_start&quot;:&quot;2304&quot;,&quot;char_end&quot;:&quot;3004&quot;,&quot;blob_name&quot;:&quot;267da1ab75cef874857aaa739a372ce459f94f43e8ab00cab1cd4bd5818b8a5d&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/migration/1744434324806-migration.ts&quot;}},{&quot;char_start&quot;:&quot;3004&quot;,&quot;char_end&quot;:&quot;3653&quot;,&quot;blob_name&quot;:&quot;267da1ab75cef874857aaa739a372ce459f94f43e8ab00cab1cd4bd5818b8a5d&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/migration/1744434324806-migration.ts&quot;}},{&quot;char_start&quot;:&quot;3653&quot;,&quot;char_end&quot;:&quot;4087&quot;,&quot;blob_name&quot;:&quot;267da1ab75cef874857aaa739a372ce459f94f43e8ab00cab1cd4bd5818b8a5d&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/migration/1744434324806-migration.ts&quot;}},{&quot;char_start&quot;:&quot;4087&quot;,&quot;char_end&quot;:&quot;4909&quot;,&quot;blob_name&quot;:&quot;267da1ab75cef874857aaa739a372ce459f94f43e8ab00cab1cd4bd5818b8a5d&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/migration/1744434324806-migration.ts&quot;}},{&quot;char_start&quot;:&quot;4909&quot;,&quot;char_end&quot;:&quot;5267&quot;,&quot;blob_name&quot;:&quot;267da1ab75cef874857aaa739a372ce459f94f43e8ab00cab1cd4bd5818b8a5d&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/migration/1744434324806-migration.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;313&quot;,&quot;blob_name&quot;:&quot;a59e6050359963ded97cf961eb2a50a98e7744c340e9319e71e459f881f7d824&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;tests/config/test-db.ts&quot;}},{&quot;char_start&quot;:&quot;2005&quot;,&quot;char_end&quot;:&quot;2595&quot;,&quot;blob_name&quot;:&quot;60363f355300cfaf72dfc59a93b0045741b999e170cd979c28487ec597ef72e6&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;README.ko.md&quot;}},{&quot;char_start&quot;:&quot;2595&quot;,&quot;char_end&quot;:&quot;3338&quot;,&quot;blob_name&quot;:&quot;60363f355300cfaf72dfc59a93b0045741b999e170cd979c28487ec597ef72e6&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;README.ko.md&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;590&quot;,&quot;blob_name&quot;:&quot;dc8df8fdbc454cd913ed8cbd30267ce493f2ecd9d776c93757e8080feba4716a&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;README.md&quot;}},{&quot;char_start&quot;:&quot;1988&quot;,&quot;char_end&quot;:&quot;2700&quot;,&quot;blob_name&quot;:&quot;dc8df8fdbc454cd913ed8cbd30267ce493f2ecd9d776c93757e8080feba4716a&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;README.md&quot;}},{&quot;char_start&quot;:&quot;2700&quot;,&quot;char_end&quot;:&quot;3282&quot;,&quot;blob_name&quot;:&quot;dc8df8fdbc454cd913ed8cbd30267ce493f2ecd9d776c93757e8080feba4716a&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;README.md&quot;}},{&quot;char_start&quot;:&quot;3282&quot;,&quot;char_end&quot;:&quot;3845&quot;,&quot;blob_name&quot;:&quot;dc8df8fdbc454cd913ed8cbd30267ce493f2ecd9d776c93757e8080feba4716a&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;README.md&quot;}},{&quot;char_start&quot;:&quot;3845&quot;,&quot;char_end&quot;:&quot;4500&quot;,&quot;blob_name&quot;:&quot;dc8df8fdbc454cd913ed8cbd30267ce493f2ecd9d776c93757e8080feba4716a&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;README.md&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;215&quot;,&quot;blob_name&quot;:&quot;532bf40859d4758b35f4f7437e59686768e4ab1c62fc66588c5b81a8105e9d5e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;tests/config/setup.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;730&quot;,&quot;blob_name&quot;:&quot;16e76d7d008752e6f67d37162c5a3107d8abf3775fd7a14eee81c9bf2a72da09&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/app.ts&quot;}},{&quot;char_start&quot;:&quot;730&quot;,&quot;char_end&quot;:&quot;1109&quot;,&quot;blob_name&quot;:&quot;16e76d7d008752e6f67d37162c5a3107d8abf3775fd7a14eee81c9bf2a72da09&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/app.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;844&quot;,&quot;blob_name&quot;:&quot;27e1dd0f07ae704fd35b451497a7ec8fc1217fcb0ea34fa2ad7d0a0d30b9f5b6&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;cloudbuild.yaml&quot;}},{&quot;char_start&quot;:&quot;844&quot;,&quot;char_end&quot;:&quot;1505&quot;,&quot;blob_name&quot;:&quot;27e1dd0f07ae704fd35b451497a7ec8fc1217fcb0ea34fa2ad7d0a0d30b9f5b6&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;cloudbuild.yaml&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;195&quot;,&quot;blob_name&quot;:&quot;f8380bbc8c12cfff83e966328ba9a0c9476162ac40200ac2594162df236d6078&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;Dockerfile&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;440&quot;,&quot;blob_name&quot;:&quot;298ddc5de1c00d47b6183c4c9a9ba824606d63f67874d1763376c09bfeefe330&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.github/workflows/lint.yml&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;256&quot;,&quot;blob_name&quot;:&quot;9d406c03c4f8f3161806269ebb65c299a8736b4b63b8a17ba252b41ccedb3bb5&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.github/dependabot.yml&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;386&quot;,&quot;blob_name&quot;:&quot;f60252a94323eb94da7147909b9cfe8dd903c298fad90a311c3b20f8e2c0ab76&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;jest.config.js&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;422&quot;,&quot;blob_name&quot;:&quot;181664b220b069d97e36d250cceb1aaf270284e0a1a773131d4ce104bcc23851&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;qodana.yaml&quot;}},{&quot;char_start&quot;:&quot;422&quot;,&quot;char_end&quot;:&quot;988&quot;,&quot;blob_name&quot;:&quot;181664b220b069d97e36d250cceb1aaf270284e0a1a773131d4ce104bcc23851&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;qodana.yaml&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;800&quot;,&quot;blob_name&quot;:&quot;ba935af920391f012094b5e9948b9030346ab4ab43cb8dd5ccd0fc6ecd948615&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;biome.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;322&quot;,&quot;blob_name&quot;:&quot;379136060081d0a81091b50d716a2a7a91cd5834b6b87d835fcef8d6915e6a1a&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;firebase.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;651&quot;,&quot;blob_name&quot;:&quot;adf2770438a4dc60a0d55178ca73d2f844622b09a44eb459fb82ee44fd068daf&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;package-lock.json&quot;}},{&quot;char_start&quot;:&quot;274238&quot;,&quot;char_end&quot;:&quot;275160&quot;,&quot;blob_name&quot;:&quot;adf2770438a4dc60a0d55178ca73d2f844622b09a44eb459fb82ee44fd068daf&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;package-lock.json&quot;}},{&quot;char_start&quot;:&quot;822&quot;,&quot;char_end&quot;:&quot;1476&quot;,&quot;blob_name&quot;:&quot;45a270caf00a29c829bf0a01df2b25d88f82a1b577d69394d1977a6e37587104&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/middleware.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;162&quot;,&quot;blob_name&quot;:&quot;f30afc245fa7b190d205dbb4b52be910117b23a47e018347d1e2500f50179687&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;start-ngork.sh&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;307&quot;,&quot;blob_name&quot;:&quot;e388e5e471c42828e4874522d788ec392b4e363f07fdd843535dd30a7a7f1fd7&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;tsconfig.jest.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;397&quot;,&quot;blob_name&quot;:&quot;f84063f867ea0f6eb78a940cc961f68c575b4aaa3ccb3687f6466255742998c9&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;tests/service/user.serivce.test.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;33&quot;,&quot;blob_name&quot;:&quot;8389eb1cc91440c127b8ebe8eb19d6e7525b606a0254ca77a819da6016b244aa&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.gitignore&quot;}}]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;1b5c7575-0690-41ee-8caa-ce8c217f3a51&quot;,&quot;request_message&quot;:&quot;여기에 추가할 수 있어?? cloudbuild에서 그것이 가능할까??? 별도의 vm인데&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;여기에 추가할 수 있어?? cloudbuild에서 그것이 가능할까??? 별도의 vm인데&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Cloud Build에서 직접 마이그레이션을 실행하는 것은 몇 가지 도전 과제가 있습니다. Cloud Build 환경은 일시적이며 데이터베이스에 직접 접근하기 어려울 수 있습니다. 다음과 같은 접근 방법을 고려해볼 수 있습니다:\n\n1. **컨테이너 내에서 마이그레이션 실행**:\n   - 애플리케이션 시작 시 마이그레이션을 자동으로 실행하도록 설정\n\n&lt;augment_code_snippet path=\&quot;src/app-prod.ts\&quot; mode=\&quot;EDIT\&quot;&gt;\n```typescript\n(async () =&gt; {\n  try {\n    await i18nInitPromise;\n    await dataSource.initialize();\n    \n    // 마이그레이션 자동 실행 추가\n    console.log('Running database migrations...');\n    await dataSource.runMigrations();\n    console.log('Migrations completed successfully');\n    \n    await app.start(process.env.PORT || 3000);\n    app.logger.info('⚡️ Bolt app is running! ⚡️');\n  } catch (error) {\n    app.logger.error('Unable to start App', error);\n  }\n})();\n```\n&lt;/augment_code_snippet&gt;\n\n2. **Dockerfile 수정**:\n\n&lt;augment_code_snippet path=\&quot;Dockerfile\&quot; mode=\&quot;EDIT\&quot;&gt;\n```dockerfile\nFROM node:20-slim\n\nWORKDIR /usr/src/app\n\nCOPY package*.json ./\n\nRUN npm install\n\nCOPY . .\n\nRUN npm run build\n\nENV NODE_ENV=production\n\n# 시작 스크립트 추가\nCOPY start-with-migrations.sh ./\nRUN chmod +x start-with-migrations.sh\n\nEXPOSE 3000\n\nCMD [\&quot;./start-with-migrations.sh\&quot;]\n```\n&lt;/augment_code_snippet&gt;\n\n3. **시작 스크립트 생성**:\n\n&lt;augment_code_snippet path=\&quot;start-with-migrations.sh\&quot; mode=\&quot;EDIT\&quot;&gt;\n```bash\n#!/bin/bash\necho \&quot;Running database migrations...\&quot;\nnpx typeorm-ts-node-commonjs migration:run -d dist/src/db.js\necho \&quot;Starting application...\&quot;\nnode dist/src/app-prod.js\n```\n&lt;/augment_code_snippet&gt;\n\n이 방법은 컨테이너가 시작될 때 마이그레이션을 실행하므로, Cloud Run에 배포될 때 자동으로 마이그레이션이 적용됩니다. 데이터베이스 연결 정보는 이미 환경 변수로 설정되어 있으므로 추가 구성이 필요하지 않습니다.\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;cloudbuild.yaml:0-844\ncloudbuild.yaml:844-1505\npackage.json:0-787\npackage.json:787-1621\npackage.json:1621-1954\nDockerfile:0-195\nsrc/app-prod.ts:0-714\nsrc/db.ts:0-290\nsrc/db.ts:290-1121\nsrc/db.ts:1121-1187\nfirebase.json:0-322\nREADME.md:0-590\nREADME.md:1988-2700\nREADME.md:2700-3282\nREADME.md:3282-3845\nREADME.md:3845-4500\nsrc/migration/1750598110663-migration.ts:0-59\nsrc/migration/1750598110663-migration.ts:59-881\n.github/workflows/lint.yml:0-440\nREADME.ko.md:2005-2595\nREADME.ko.md:2595-3338\nsrc/app.ts:0-730\nsrc/app.ts:730-1109\nsrc/migration/1745063832591-migration.ts:0-703\nsrc/migration/1744434324806-migration.ts:0-705\nsrc/migration/1744434324806-migration.ts:705-1222\nsrc/migration/1744434324806-migration.ts:4087-4909\nqodana.yaml:0-422\nqodana.yaml:422-988\nstart-ngork.sh:0-162\n.firebaserc:0-58\nsrc/migration/1745118978340-migration.ts:0-505\nsrc/listeners/events/slack-ui/build-install-message.ts:0-384\npackage-lock.json:0-651\nsrc/listeners/messages/send-welcome-message.ts:0-556\nsrc/listeners/events/app-home-opened.ts:387-963\ntests/config/setup.ts:0-215\nsrc/listeners/events/slack-ui/build-app-home.ts:0-715\ntests/config/test-db.ts:0-313\nbiome.json:0-800\n.gitignore:0-33\njest.config.js:0-386\nsrc/receiver.ts:390-1087\nsrc/listeners/actions/update-back-to-home.ts:409-905\nsrc/routes/user-vacation.ts:513-1445\n.github/dependabot.yml:0-256&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;여기에 추가할 수 있어?? cloudbuild에서 그것이 가능할까??? 별도의 vm인데&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/user/WebstormProjects/vacay-buddy&quot;,&quot;folderRoot&quot;:&quot;/Users/user/WebstormProjects/vacay-buddy&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-22T13:18:14.436Z&quot;,&quot;response_text&quot;:&quot;Cloud Build에서 직접 마이그레이션을 실행하는 것은 몇 가지 도전 과제가 있습니다. Cloud Build 환경은 일시적이며 데이터베이스에 직접 접근하기 어려울 수 있습니다. 다음과 같은 접근 방법을 고려해볼 수 있습니다:\n\n1. **컨테이너 내에서 마이그레이션 실행**:\n   - 애플리케이션 시작 시 마이그레이션을 자동으로 실행하도록 설정\n\n````typescript path=src/app-prod.ts mode=EDIT\n(async () =&gt; {\n  try {\n    await i18nInitPromise;\n    await dataSource.initialize();\n    \n    // 마이그레이션 자동 실행 추가\n    console.log('Running database migrations...');\n    await dataSource.runMigrations();\n    console.log('Migrations completed successfully');\n    \n    await app.start(process.env.PORT || 3000);\n    app.logger.info('⚡️ Bolt app is running! ⚡️');\n  } catch (error) {\n    app.logger.error('Unable to start App', error);\n  }\n})();\n````\n\n2. **Dockerfile 수정**:\n\n````dockerfile path=Dockerfile mode=EDIT\nFROM node:20-slim\n\nWORKDIR /usr/src/app\n\nCOPY package*.json ./\n\nRUN npm install\n\nCOPY . .\n\nRUN npm run build\n\nENV NODE_ENV=production\n\n# 시작 스크립트 추가\nCOPY start-with-migrations.sh ./\nRUN chmod +x start-with-migrations.sh\n\nEXPOSE 3000\n\nCMD [\&quot;./start-with-migrations.sh\&quot;]\n````\n\n3. **시작 스크립트 생성**:\n\n````bash path=start-with-migrations.sh mode=EDIT\n#!/bin/bash\necho \&quot;Running database migrations...\&quot;\nnpx typeorm-ts-node-commonjs migration:run -d dist/src/db.js\necho \&quot;Starting application...\&quot;\nnode dist/src/app-prod.js\n````\n\n이 방법은 컨테이너가 시작될 때 마이그레이션을 실행하므로, Cloud Run에 배포될 때 자동으로 마이그레이션이 적용됩니다. 데이터베이스 연결 정보는 이미 환경 변수로 설정되어 있으므로 추가 구성이 필요하지 않습니다.\n&quot;,&quot;workspace_file_chunks&quot;:[{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;844&quot;,&quot;blob_name&quot;:&quot;27e1dd0f07ae704fd35b451497a7ec8fc1217fcb0ea34fa2ad7d0a0d30b9f5b6&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;cloudbuild.yaml&quot;}},{&quot;char_start&quot;:&quot;844&quot;,&quot;char_end&quot;:&quot;1505&quot;,&quot;blob_name&quot;:&quot;27e1dd0f07ae704fd35b451497a7ec8fc1217fcb0ea34fa2ad7d0a0d30b9f5b6&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;cloudbuild.yaml&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;787&quot;,&quot;blob_name&quot;:&quot;d120785b8a2760680b2d37e9613c318ee74b53e71868a028525e8b429e877f83&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;package.json&quot;}},{&quot;char_start&quot;:&quot;787&quot;,&quot;char_end&quot;:&quot;1621&quot;,&quot;blob_name&quot;:&quot;d120785b8a2760680b2d37e9613c318ee74b53e71868a028525e8b429e877f83&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;package.json&quot;}},{&quot;char_start&quot;:&quot;1621&quot;,&quot;char_end&quot;:&quot;1954&quot;,&quot;blob_name&quot;:&quot;d120785b8a2760680b2d37e9613c318ee74b53e71868a028525e8b429e877f83&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;package.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;195&quot;,&quot;blob_name&quot;:&quot;f8380bbc8c12cfff83e966328ba9a0c9476162ac40200ac2594162df236d6078&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;Dockerfile&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;714&quot;,&quot;blob_name&quot;:&quot;2797f9f2d7104d45db1656af07e66999ed3eae6d2ee46f6b055bf5f1138ceb82&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/app-prod.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;290&quot;,&quot;blob_name&quot;:&quot;ebf22249fa66f35151e4eaf4a3cc539ebbd04d66c7d1b270c254413a0d43e4c4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/db.ts&quot;}},{&quot;char_start&quot;:&quot;290&quot;,&quot;char_end&quot;:&quot;1121&quot;,&quot;blob_name&quot;:&quot;ebf22249fa66f35151e4eaf4a3cc539ebbd04d66c7d1b270c254413a0d43e4c4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/db.ts&quot;}},{&quot;char_start&quot;:&quot;1121&quot;,&quot;char_end&quot;:&quot;1187&quot;,&quot;blob_name&quot;:&quot;ebf22249fa66f35151e4eaf4a3cc539ebbd04d66c7d1b270c254413a0d43e4c4&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/db.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;322&quot;,&quot;blob_name&quot;:&quot;379136060081d0a81091b50d716a2a7a91cd5834b6b87d835fcef8d6915e6a1a&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;firebase.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;590&quot;,&quot;blob_name&quot;:&quot;dc8df8fdbc454cd913ed8cbd30267ce493f2ecd9d776c93757e8080feba4716a&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;README.md&quot;}},{&quot;char_start&quot;:&quot;1988&quot;,&quot;char_end&quot;:&quot;2700&quot;,&quot;blob_name&quot;:&quot;dc8df8fdbc454cd913ed8cbd30267ce493f2ecd9d776c93757e8080feba4716a&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;README.md&quot;}},{&quot;char_start&quot;:&quot;2700&quot;,&quot;char_end&quot;:&quot;3282&quot;,&quot;blob_name&quot;:&quot;dc8df8fdbc454cd913ed8cbd30267ce493f2ecd9d776c93757e8080feba4716a&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;README.md&quot;}},{&quot;char_start&quot;:&quot;3282&quot;,&quot;char_end&quot;:&quot;3845&quot;,&quot;blob_name&quot;:&quot;dc8df8fdbc454cd913ed8cbd30267ce493f2ecd9d776c93757e8080feba4716a&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;README.md&quot;}},{&quot;char_start&quot;:&quot;3845&quot;,&quot;char_end&quot;:&quot;4500&quot;,&quot;blob_name&quot;:&quot;dc8df8fdbc454cd913ed8cbd30267ce493f2ecd9d776c93757e8080feba4716a&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;README.md&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;59&quot;,&quot;blob_name&quot;:&quot;9ee96ec0d7d948a8082c8129a9faa6a6c62757930f72d749a443cc96c95dc4e0&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/migration/1750598110663-migration.ts&quot;}},{&quot;char_start&quot;:&quot;59&quot;,&quot;char_end&quot;:&quot;881&quot;,&quot;blob_name&quot;:&quot;9ee96ec0d7d948a8082c8129a9faa6a6c62757930f72d749a443cc96c95dc4e0&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/migration/1750598110663-migration.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;440&quot;,&quot;blob_name&quot;:&quot;298ddc5de1c00d47b6183c4c9a9ba824606d63f67874d1763376c09bfeefe330&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.github/workflows/lint.yml&quot;}},{&quot;char_start&quot;:&quot;2005&quot;,&quot;char_end&quot;:&quot;2595&quot;,&quot;blob_name&quot;:&quot;60363f355300cfaf72dfc59a93b0045741b999e170cd979c28487ec597ef72e6&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;README.ko.md&quot;}},{&quot;char_start&quot;:&quot;2595&quot;,&quot;char_end&quot;:&quot;3338&quot;,&quot;blob_name&quot;:&quot;60363f355300cfaf72dfc59a93b0045741b999e170cd979c28487ec597ef72e6&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;README.ko.md&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;730&quot;,&quot;blob_name&quot;:&quot;16e76d7d008752e6f67d37162c5a3107d8abf3775fd7a14eee81c9bf2a72da09&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/app.ts&quot;}},{&quot;char_start&quot;:&quot;730&quot;,&quot;char_end&quot;:&quot;1109&quot;,&quot;blob_name&quot;:&quot;16e76d7d008752e6f67d37162c5a3107d8abf3775fd7a14eee81c9bf2a72da09&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/app.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;703&quot;,&quot;blob_name&quot;:&quot;b37ba129f36ef9c915ac600806a5d3a387cc023d9c5993a905d878bea53f85b5&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/migration/1745063832591-migration.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;705&quot;,&quot;blob_name&quot;:&quot;267da1ab75cef874857aaa739a372ce459f94f43e8ab00cab1cd4bd5818b8a5d&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/migration/1744434324806-migration.ts&quot;}},{&quot;char_start&quot;:&quot;705&quot;,&quot;char_end&quot;:&quot;1222&quot;,&quot;blob_name&quot;:&quot;267da1ab75cef874857aaa739a372ce459f94f43e8ab00cab1cd4bd5818b8a5d&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/migration/1744434324806-migration.ts&quot;}},{&quot;char_start&quot;:&quot;4087&quot;,&quot;char_end&quot;:&quot;4909&quot;,&quot;blob_name&quot;:&quot;267da1ab75cef874857aaa739a372ce459f94f43e8ab00cab1cd4bd5818b8a5d&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/migration/1744434324806-migration.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;422&quot;,&quot;blob_name&quot;:&quot;181664b220b069d97e36d250cceb1aaf270284e0a1a773131d4ce104bcc23851&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;qodana.yaml&quot;}},{&quot;char_start&quot;:&quot;422&quot;,&quot;char_end&quot;:&quot;988&quot;,&quot;blob_name&quot;:&quot;181664b220b069d97e36d250cceb1aaf270284e0a1a773131d4ce104bcc23851&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;qodana.yaml&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;162&quot;,&quot;blob_name&quot;:&quot;f30afc245fa7b190d205dbb4b52be910117b23a47e018347d1e2500f50179687&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;start-ngork.sh&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;58&quot;,&quot;blob_name&quot;:&quot;ad055fb887416c5f33bfb69bc485bcb2441839f64aee87f53a933c2dac55a1ac&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.firebaserc&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;505&quot;,&quot;blob_name&quot;:&quot;e12679f055f3b0814bfe0c2ee5291e51e41d7f57c869cfb049a0b51a32918d22&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/migration/1745118978340-migration.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;384&quot;,&quot;blob_name&quot;:&quot;273cedc344a508ceff647c7da2a3e0be698901ef6d866bc8c0a6a5841a57642e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/listeners/events/slack-ui/build-install-message.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;651&quot;,&quot;blob_name&quot;:&quot;adf2770438a4dc60a0d55178ca73d2f844622b09a44eb459fb82ee44fd068daf&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;package-lock.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;556&quot;,&quot;blob_name&quot;:&quot;bf2dd0ef60e274f16b6682eab2769ce91356f6bd22323e24372d98fde6ddc9c5&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/listeners/messages/send-welcome-message.ts&quot;}},{&quot;char_start&quot;:&quot;387&quot;,&quot;char_end&quot;:&quot;963&quot;,&quot;blob_name&quot;:&quot;b358a5caea6411fba7b7f2de58f9dfa72a61edc6f05e3af97f30ee6b87499fe0&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/listeners/events/app-home-opened.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;215&quot;,&quot;blob_name&quot;:&quot;532bf40859d4758b35f4f7437e59686768e4ab1c62fc66588c5b81a8105e9d5e&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;tests/config/setup.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;715&quot;,&quot;blob_name&quot;:&quot;0a030cefb1dd85e170f273cdb5d82e3e3289bb60828f43b75adb2e9d9d15043a&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/listeners/events/slack-ui/build-app-home.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;313&quot;,&quot;blob_name&quot;:&quot;a59e6050359963ded97cf961eb2a50a98e7744c340e9319e71e459f881f7d824&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;tests/config/test-db.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;800&quot;,&quot;blob_name&quot;:&quot;ba935af920391f012094b5e9948b9030346ab4ab43cb8dd5ccd0fc6ecd948615&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;biome.json&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;33&quot;,&quot;blob_name&quot;:&quot;8389eb1cc91440c127b8ebe8eb19d6e7525b606a0254ca77a819da6016b244aa&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.gitignore&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;386&quot;,&quot;blob_name&quot;:&quot;f60252a94323eb94da7147909b9cfe8dd903c298fad90a311c3b20f8e2c0ab76&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;jest.config.js&quot;}},{&quot;char_start&quot;:&quot;390&quot;,&quot;char_end&quot;:&quot;1087&quot;,&quot;blob_name&quot;:&quot;7e7969fe8b2b0a0570077cc4ae2967c07f7b7f58a6b39818b2575ad3d2131781&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/receiver.ts&quot;}},{&quot;char_start&quot;:&quot;409&quot;,&quot;char_end&quot;:&quot;905&quot;,&quot;blob_name&quot;:&quot;caccce2eab65832dd7e1565801d9a51aadd98a17cdfcca84fe56c7604549f73d&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/listeners/actions/update-back-to-home.ts&quot;}},{&quot;char_start&quot;:&quot;513&quot;,&quot;char_end&quot;:&quot;1445&quot;,&quot;blob_name&quot;:&quot;c3b3d663554a5924012cde947f8a463ec8dc8aa317dae03c94a8b19a749a5f26&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/routes/user-vacation.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;256&quot;,&quot;blob_name&quot;:&quot;9d406c03c4f8f3161806269ebb65c299a8736b4b63b8a17ba252b41ccedb3bb5&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;.github/dependabot.yml&quot;}}]}],&quot;feedbackStates&quot;:{&quot;temp-fe-9b935dfa-44a7-45ad-a43a-14b38dd1b547&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-57eff654-3735-4443-af3e-82f227102129&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;}},&quot;toolUseStates&quot;:{},&quot;draftExchange&quot;:{&quot;request_message&quot;:&quot;&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;}]},&quot;status&quot;:&quot;draft&quot;},&quot;requestIds&quot;:[],&quot;isPinned&quot;:false,&quot;isShareable&quot;:true,&quot;extraData&quot;:{&quot;hasDirtyEdits&quot;:false},&quot;personaType&quot;:0,&quot;rootTaskUuid&quot;:&quot;15161715-4599-4f74-8f76-7fa3f93a5f1a&quot;},&quot;1dcd7d1f-ac6a-4add-83b8-b0e2f47541c0&quot;:{&quot;id&quot;:&quot;1dcd7d1f-ac6a-4add-83b8-b0e2f47541c0&quot;,&quot;createdAtIso&quot;:&quot;2025-06-22T12:49:19.411Z&quot;,&quot;lastInteractedAtIso&quot;:&quot;2025-06-22T12:54:12.889Z&quot;,&quot;chatHistory&quot;:[{&quot;request_id&quot;:&quot;147b4ec8-b826-4e96-a407-7234465f6075&quot;,&quot;uuid&quot;:&quot;32be7455-43cd-4ef8-87c9-2983908f48c6&quot;,&quot;chatItemType&quot;:&quot;agentic-checkpoint-delimiter&quot;,&quot;status&quot;:&quot;success&quot;,&quot;fromTimestamp&quot;:0,&quot;toTimestamp&quot;:1750596559411,&quot;seen_state&quot;:&quot;seen&quot;},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;2ad7fc4a-5627-4d8d-bd9b-718baf0bf943&quot;,&quot;request_message&quot;:&quot;지금 글로벌 익셉션이 없는 상황인데 express가 종료되진 않는 것 같다?&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;지금 글로벌 익셉션이 없는 상황인데 express가 종료되진 않는 것 같다?&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_012b3X3AHDaFcx23PLn8puUu&quot;,&quot;tool_name&quot;:&quot;codebase-retrieval&quot;,&quot;input_json&quot;:&quot;{\&quot;information_request\&quot;: \&quot;Express \\uc560\\ud50c\\ub9ac\\ucf00\\uc774\\uc158\\uc758 \\uae00\\ub85c\\ubc8c \\uc5d0\\ub7ec \\ud578\\ub4e4\\ub9c1 \\ubbf8\\ub4e4\\uc6e8\\uc5b4, uncaught exception \\ud578\\ub4e4\\ub7ec, unhandled rejection \\ud578\\ub4e4\\ub7ec, \\uadf8\\ub9ac\\uace0 \\uba54\\uc778 \\uc11c\\ubc84 \\uc124\\uc815 \\ud30c\\uc77c\\ub4e4\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;현재 상황을 파악하기 위해 Express 애플리케이션의 에러 핸들링 구조를 살펴보겠습니다.\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;지금 글로벌 익셉션이 없는 상황인데 express가 종료되진 않는 것 같다?&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/user/WebstormProjects/vacay-buddy&quot;,&quot;folderRoot&quot;:&quot;/Users/user/WebstormProjects/vacay-buddy&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-22T12:53:50.895Z&quot;,&quot;response_text&quot;:&quot;현재 상황을 파악하기 위해 Express 애플리케이션의 에러 핸들링 구조를 살펴보겠습니다.\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;d9502991-c04c-400b-be0a-55d65fad6c15&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_01Tx9sKS36yxHyyLJa4t79eW&quot;,&quot;tool_name&quot;:&quot;codebase-retrieval&quot;,&quot;input_json&quot;:&quot;{\&quot;information_request\&quot;: \&quot;process.on('uncaughtException'), process.on('unhandledRejection'), Express \\uc5d0\\ub7ec \\ud578\\ub4e4\\ub9c1 \\ubbf8\\ub4e4\\uc6e8\\uc5b4, try-catch \\ube14\\ub85d\\ub4e4, \\uadf8\\ub9ac\\uace0 \\uc560\\ud50c\\ub9ac\\ucf00\\uc774\\uc158 \\uc885\\ub8cc \\uad00\\ub828 \\ucf54\\ub4dc\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;현재 코드를 보니 Express 애플리케이션에 글로벌 에러 핸들링이 설정되어 있지 않은 상황입니다. 하지만 Express가 종료되지 않는 이유를 확인해보겠습니다.\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;The following code sections were retrieved:\nPath: src/app-prod.ts\n     1\timport 'reflect-metadata';\n     2\timport { config } from 'dotenv';\n     3\t\n     4\tconfig();\n     5\t\n     6\timport { App } from '@slack/bolt';\n     7\timport { dataSource } from './db';\n     8\timport { i18nInitPromise } from './i18n';\n     9\timport registerListeners from './listeners';\n    10\timport registerMiddleware from './middleware';\n    11\timport receiver from './receiver';\n    12\t\n    13\tconst app = new App({\n    14\t  receiver,\n    15\t});\n    16\t\n    17\t/** Register Listeners */\n    18\tregisterListeners(app);\n    19\tregisterMiddleware(app);\n    20\t\n    21\t/** Start Bolt App */\n    22\t(async () =&gt; {\n    23\t  try {\n    24\t    await i18nInitPromise;\n    25\t    await dataSource.initialize();\n    26\t    await app.start(process.env.PORT || 3000);\n    27\t    app.logger.info('⚡️ Bolt app is running! ⚡️');\n    28\t  } catch (error) {\n    29\t    app.logger.error('Unable to start App', error);\n    30\t  }\n    31\t})();\n...\nPath: src/app.ts\n     1\timport 'reflect-metadata';\n     2\timport { config } from 'dotenv';\n     3\t\n     4\tconfig();\n     5\t\n     6\timport { App, type Context, LogLevel } from '@slack/bolt';\n     7\timport { dataSource } from './db';\n     8\timport type { Organization } from './entity/organization.model';\n     9\timport type { User } from './entity/user.model';\n    10\timport { i18nInitPromise } from './i18n';\n    11\timport registerListeners from './listeners';\n    12\timport registerMiddleware from './middleware';\n    13\t\n    14\texport interface AppContext extends Context {\n    15\t  locale: string;\n    16\t  organization: Organization;\n    17\t  user: User;\n    18\t}\n    19\t\n    20\tconst app = new App({\n    21\t  token: process.env.SLACK_BOT_TOKEN,\n    22\t  appToken: process.env.SLACK_APP_TOKEN,\n    23\t  signingSecret: process.env.SLACK_SIGNING_SECRET,\n    24\t  socketMode: true,\n    25\t  logLevel: LogLevel.DEBUG,\n    26\t});\n    27\t\n    28\t/** Register listeners and middleware */\n    29\tregisterListeners(app);\n    30\tregisterMiddleware(app);\n    31\t\n    32\t/** Start Bolt App */\n    33\t(async () =&gt; {\n    34\t  try {\n    35\t    await i18nInitPromise;\n    36\t    await dataSource.initialize();\n    37\t    await app.start(process.env.PORT || 3000);\n    38\t    app.logger.info('⚡️ Bolt app is running! ⚡️');\n    39\t  } catch (error) {\n    40\t    app.logger.error('Unable to start App', error);\n    41\t  }\n    42\t})();\n...\nPath: src/receiver.ts\n     1\timport path from 'node:path';\n     2\timport { ExpressReceiver, LogLevel } from '@slack/bolt';\n     3\timport { WebClient } from '@slack/web-api';\n     4\timport express from 'express';\n     5\timport { buildInstallMessage } from './listeners/events/slack-ui/build-install-message';\n     6\timport routes from './routes';\n     7\timport { organizationService, ptoService, userService } from './service';\n     8\timport { assert } from './utils';\n     9\t\n    10\tconst receiver = new ExpressReceiver({\n    11\t  logLevel: LogLevel.INFO,\n    12\t  signingSecret: process.env.SLACK_SIGNING_SECRET || '',\n    13\t  clientId: process.env.SLACK_CLIENT_ID,\n    14\t  clientSecret: process.env.SLACK_CLIENT_SECRET,\n    15\t  stateSecret: process.env.SLACK_STATE_SECRET,\n    16\t  scopes: process.env.SLACK_SCOPES?.split(',') || [],\n    17\t  installationStore: {\n    18\t    storeInstallation: async (installation) =&gt; {\n    19\t      const organizationId = installation.enterprise?.id || installation.team?.id;\n    20\t\n    21\t      assert(organizationId !== undefined, 'Organization ID is undefined');\n    22\t      assert(installation.bot !== undefined, 'Bot installation is undefined');\n    23\t      assert(installation.appId !== undefined, 'App ID is undefined');\n    24\t\n    25\t      const client = new WebClient(installation.bot.token);\n    26\t      const result = await client.users.info({\n    27\t        user: installation.user.id,\n    28\t        include_locale: true,\n    29\t      });\n    30\t\n    31\t      const locale = result.user?.locale || 'en-US';\n    32\t\n    33\t      const organization = await organizationService.getOrganization(organizationId);\n    34\t      if (organization) {\n    35\t        await organizationService.deleteOrganization(organizationId);\n    36\t      }\n    37\t\n    38\t      // create organization, user, and default pto templates\n    39\t      const newOrganization = await organizationService.createOrganization(\n    40\t        organizationId,\n    41\t        installation.isEnterpriseInstall !== undefined,\n    42\t        JSON.stringify(installation),\n    43\t      );\n    44\t      await ptoService.createDefaultPtoTemplates(locale, newOrganization);\n    45\t      const installer = await userService.getOrCreateUser(installation.user.id, newOrganization, true);\n    46\t\n    47\t      // Create users for all team members\n    48\t      await organizationService.importTeamMembers(installation.bot.token, newOrganization);\n    49\t\n    50\t      // send welcome message to the installer\n    51\t      await client.chat.postMessage({\n    52\t        channel: installer.userId,\n    53\t        text: `Hello &lt;@${installer.userId}&gt;! Thanks for installing the app!`,\n    54\t        blocks: buildInstallMessage(locale, newOrganization.organizationId, installation.appId),\n    55\t      });\n    56\t    },\n    57\t\n    58\t    fetchInstallation: async (installQuery) =&gt; {\n    59\t      const organizationId = installQuery.enterpriseId || installQuery.teamId;\n    60\t      assert(organizationId !== undefined, 'Organization ID is undefined');\n    61\t\n    62\t      const organization = await organizationService.getOrganization(organizationId);\n    63\t      assert(organization !== null, 'Organization not found');\n    64\t\n    65\t      return JSON.parse(organization.installation);\n    66\t    },\n    67\t    deleteInstallation: async (installQuery) =&gt; {\n    68\t      const organizationId = installQuery.enterpriseId || installQuery.teamId;\n    69\t      assert(organizationId !== undefined, 'Organization ID is undefined');\n    70\t      await organizationService.deleteOrganization(organizationId);\n    71\t    },\n    72\t  },\n    73\t  installerOptions: {\n    74\t    directInstall: true,\n    75\t    redirectUriPath: '/slack/oauth_redirect',\n    76\t  },\n    77\t});\n    78\t\n    79\t// Serve static assets (CSS, JS, fonts) from the public directory\n    80\treceiver.app.use('/assets', express.static(path.join(process.cwd(), 'public/assets')));\n    81\t\n    82\troutes.register(receiver.app);\n    83\t\n    84\texport default receiver;\n...\nPath: src/middleware.ts\n     1\timport type { AllMiddlewareArgs, App } from '@slack/bolt';\n     2\timport type { AppContext } from './app';\n     3\timport type { Organization } from './entity/organization.model';\n     4\timport { organizationService, userService } from './service';\n     5\timport { assert } from './utils';\n     6\t\n     7\tconst loadAppContext = async ({ context, client, next }: AllMiddlewareArgs&lt;AppContext&gt;) =&gt; {\n     8\t  const organizationId = context.teamId || context.enterpriseId;\n     9\t  assert(organizationId !== undefined, 'Organization ID is undefined');\n    10\t\n    11\t  if (!organizationId || !context.userId) {\n    12\t    return await next();\n    13\t  }\n    14\t\n    15\t  const organization: Organization = await organizationService.getOrCreateOrganization(\n    16\t    organizationId,\n    17\t    context.enterpriseId !== undefined,\n    18\t  );\n    19\t\n    20\t  const result = await client.users.info({\n    21\t    user: context.userId,\n    22\t    include_locale: true,\n    23\t  });\n    24\t\n    25\t  context.locale = result.user?.locale ?? 'en-US';\n    26\t  context.organization = organization;\n    27\t  context.user = await userService.getOrCreateUser(context.userId, context.organization);\n    28\t\n    29\t  if (context.user.name !== result.user?.real_name) {\n    30\t    context.user.name = result.user?.real_name ?? '';\n    31\t    await userService.updateUser(context.userId, {\n    32\t      ...context.user,\n    33\t      name: context.user.name,\n    34\t    });\n    35\t  }\n    36\t\n    37\t  await next();\n    38\t};\n    39\t\n    40\tconst registerMiddleware = (app: App) =&gt; {\n    41\t  app.use(loadAppContext);\n    42\t};\n    43\t\n    44\texport default registerMiddleware;\n...\nPath: src/routes/user-vacation.ts\n...\n    15\t\n    16\t    let decoded: { organizationId: string; userId: string };\n    17\t    try {\n    18\t      decoded = jwt.verify(token, process.env.JWT_SECRET || 'default-secret-key') as {\n    19\t        organizationId: string;\n    20\t        userId: string;\n    21\t      };\n    22\t    } catch (error) {\n    23\t      if (error instanceof jwt.TokenExpiredError) {\n    24\t        const html = `\n    25\t    &lt;!DOCTYPE html&gt;\n    26\t    &lt;html lang=\&quot;ko\&quot;&gt;\n    27\t    &lt;head&gt;\n    28\t      &lt;meta charset=\&quot;UTF-8\&quot;&gt;\n    29\t      &lt;title&gt;만료된 접근&lt;/title&gt;\n    30\t      &lt;style&gt;${expiredTokenStyles}&lt;/style&gt;\n    31\t    &lt;/head&gt;\n    32\t    &lt;body&gt;\n    33\t      &lt;div class=\&quot;container\&quot;&gt;\n    34\t        &lt;h1&gt;접근 시간이 만료되었습니다&lt;/h1&gt;\n    35\t        &lt;div class=\&quot;message\&quot;&gt;\n    36\t          &lt;p&gt;보안상의 이유로 접근 링크가 1시간 후에 만료됩니다.&lt;/p&gt;\n    37\t          &lt;p&gt;슬랙에서 다시 접근해 주세요.&lt;/p&gt;\n    38\t        &lt;/div&gt;\n    39\t      &lt;/div&gt;\n    40\t    &lt;/body&gt;\n    41\t    &lt;/html&gt;\n    42\t    `;\n    43\t        res.set('Content-Type', 'text/html');\n    44\t        res.status(401).send(html);\n    45\t        return;\n    46\t      }\n    47\t\n    48\t      // For other token errors\n    49\t      res.status(401).send('Invalid token');\n    50\t      return;\n    51\t    }\n...\nPath: src/routes/team-vacation.ts\n     1\timport { Application, Request, Response } from 'express';\n     2\timport jwt from 'jsonwebtoken';\n     3\timport { organizationService, ptoService } from '../service';\n     4\timport { commonStyles, expiredTokenStyles } from './css';\n     5\t\n     6\texport default (app: Application) =&gt; {\n     7\t  app.get('/team-vacation-html', async (req: Request, res: Response) =&gt; {\n     8\t    const { token } = req.query;\n     9\t\n    10\t    if (!token || typeof token !== 'string') {\n    11\t      res.status(400).send('Invalid token');\n    12\t      return;\n    13\t    }\n    14\t\n    15\t    let decoded: { organizationId: string; userId?: string };\n    16\t    try {\n    17\t      decoded = jwt.verify(token, process.env.JWT_SECRET || 'default-secret-key') as {\n    18\t        organizationId: string;\n    19\t        userId?: string;\n    20\t      };\n    21\t    } catch (error) {\n    22\t      if (error instanceof jwt.TokenExpiredError) {\n    23\t        const html = `\n    24\t    &lt;!DOCTYPE html&gt;\n    25\t    &lt;html lang=\&quot;ko\&quot;&gt;\n    26\t    &lt;head&gt;\n    27\t      &lt;meta charset=\&quot;UTF-8\&quot;&gt;\n    28\t      &lt;title&gt;만료된 접근&lt;/title&gt;\n    29\t      &lt;style&gt;${expiredTokenStyles}&lt;/style&gt;\n    30\t    &lt;/head&gt;\n    31\t    &lt;body&gt;\n    32\t      &lt;div class=\&quot;container\&quot;&gt;\n    33\t        &lt;h1&gt;접근 시간이 만료되었습니다&lt;/h1&gt;\n    34\t        &lt;div class=\&quot;message\&quot;&gt;\n    35\t          &lt;p&gt;보안상의 이유로 접근 링크가 1시간 후에 만료됩니다.&lt;/p&gt;\n    36\t          &lt;p&gt;슬랙 \&quot;팀 연차 현황 보기 버튼\&quot;을 통해 다시 접근해 주세요.&lt;/p&gt;\n    37\t        &lt;/div&gt;\n    38\t      &lt;/div&gt;\n    39\t    &lt;/body&gt;\n    40\t    &lt;/html&gt;\n    41\t    `;\n    42\t        res.set('Content-Type', 'text/html');\n    43\t        res.status(401).send(html);\n    44\t        return;\n    45\t      }\n    46\t\n    47\t      // For other token errors\n    48\t      res.status(401).send('Invalid token');\n    49\t      return;\n    50\t    }\n...\nPath: package.json\n     1\t{\n     2\t  \&quot;name\&quot;: \&quot;vacaybuddy\&quot;,\n     3\t  \&quot;version\&quot;: \&quot;1.0.0\&quot;,\n     4\t  \&quot;description\&quot;: \&quot;A Slack app for easily requesting, approving, and managing PTO directly within Slack\&quot;,\n     5\t  \&quot;main\&quot;: \&quot;dist/app.js\&quot;,\n     6\t  \&quot;scripts\&quot;: {\n     7\t    \&quot;build\&quot;: \&quot;tsc\&quot;,\n     8\t    \&quot;start\&quot;: \&quot;npm run build &amp;&amp; node ./dist/src/app-prod.js\&quot;,\n     9\t    \&quot;lint\&quot;: \&quot;npx @biomejs/biome check src\&quot;,\n    10\t    \&quot;lint:fix\&quot;: \&quot;npx @biomejs/biome check --write src\&quot;,\n    11\t    \&quot;test\&quot;: \&quot;npm run build &amp;&amp; npm run lint &amp;&amp; npm run test:jest\&quot;,\n    12\t    \&quot;dev-socket\&quot;: \&quot;nodemon --ext ts --exec ts-node src/app.ts\&quot;,\n    13\t    \&quot;dev-http\&quot;: \&quot;nodemon --ext ts --exec ts-node src/app-prod.ts\&quot;,\n    14\t    \&quot;typeorm\&quot;: \&quot;typeorm-ts-node-commonjs\&quot;,\n    15\t    \&quot;test:jest\&quot;: \&quot;jest\&quot;,\n    16\t    \&quot;migration:generate\&quot;: \&quot;ts-node --require dotenv/config ./node_modules/typeorm/cli.js migration:generate src/migration/migration/ -d src/db.ts\&quot;,\n...\nPath: src/routes/index.ts\n     1\timport { type Application } from 'express';\n     2\timport excelTemplate from './excel-template';\n     3\timport home from './home';\n     4\timport pendingNotification from './pending-notification';\n     5\timport teamVacation from './team-vacation';\n     6\timport userVacation from './user-vacation';\n     7\t\n     8\tconst registerRoutes = (app: Application) =&gt; {\n     9\t  userVacation(app);\n    10\t  teamVacation(app);\n    11\t  excelTemplate(app);\n    12\t  home(app);\n    13\t  pendingNotification(app);\n    14\t};\n    15\t\n    16\texport default { register: registerRoutes };\n...\nPath: src/listeners/events/index.ts\n     1\timport type { App } from '@slack/bolt';\n     2\timport appHomeOpenedCallback from './app-home-opened';\n     3\timport fileShared from './file-shared';\n     4\t\n     5\tconst register = (app: App) =&gt; {\n     6\t  app.event('app_home_opened', appHomeOpenedCallback);\n     7\t  app.event('file_shared', fileShared);\n     8\t};\n     9\t\n    10\texport default { register };\n...\nPath: src/listeners/index.ts\n     1\timport type { App } from '@slack/bolt';\n     2\timport actions from './actions';\n     3\timport commands from './commands';\n     4\timport events from './events';\n     5\timport messages from './messages';\n     6\timport shortcuts from './shortcuts';\n     7\timport views from './views';\n     8\t\n     9\tconst registerListeners = (app: App) =&gt; {\n    10\t  actions.register(app);\n    11\t  commands.register(app);\n    12\t  events.register(app);\n    13\t  messages.register(app);\n    14\t  shortcuts.register(app);\n    15\t  views.register(app);\n    16\t};\n    17\t\n    18\texport default registerListeners;\n...\nPath: src/listeners/events/file-shared.ts\n...\n     9\t\n    10\tconst fileShared = async ({\n    11\t  client,\n    12\t  event,\n    13\t  logger,\n    14\t  context,\n    15\t}: AllMiddlewareArgs&lt;AppContext&gt; &amp; SlackEventMiddlewareArgs&lt;'file_shared'&gt;) =&gt; {\n    16\t  try {\n    17\t    const fileId = event.file_id;\n    18\t    const fileInfo = await client.files.info({ file: fileId });\n    19\t\n    20\t    if (!fileInfo.file) {\n    21\t      return;\n    22\t    }\n    23\t\n    24\t    const fileUrl = fileInfo.file.url_private_download;\n    25\t\n    26\t    // download file\n    27\t    const response = await axios({\n    28\t      method: 'get',\n    29\t      url: fileUrl,\n    30\t      headers: {\n    31\t        Authorization: `Bearer ${context.botToken}`,\n    32\t      },\n    33\t      responseType: 'arraybuffer',\n    34\t    });\n    35\t\n    36\t    if (response.status !== 200) {\n    37\t      logger.error(`Failed to download file: ${response.statusText}`);\n    38\t      return;\n    39\t    }\n...\n    83\t\n    84\t    await client.chat.postMessage({\n    85\t      channel: event.channel_id,\n    86\t      text: `✅ ${t(context.locale, 'users_updated_success', { count: updatedCount.toString() })}`,\n    87\t    });\n    88\t  } catch (error) {\n    89\t    const errorMessage = error instanceof Error ? error.message : String(error);\n    90\t\n    91\t    await client.chat.postMessage({\n    92\t      channel: event.channel_id,\n    93\t      text: t(context.locale, 'file_shared_error', { message: errorMessage }),\n    94\t    });\n    95\t\n    96\t    logger.error(errorMessage);\n    97\t  }\n    98\t};\n    99\t\n   100\texport default fileShared;\n...\nPath: src/routes/home.ts\n     1\timport { type Application, Request, Response } from 'express';\n     2\t\n     3\texport default (app: Application) =&gt; {\n     4\t  app.get('/', async (req: Request, res: Response) =&gt; {\n     5\t    const html = `\n     6\t    &lt;!DOCTYPE html&gt;\n     7\t    &lt;html lang=\&quot;en\&quot;&gt;\n     8\t      &lt;head&gt;&lt;title&gt;Hello VacayBuddy&lt;/title&gt;&lt;/head&gt;\n     9\t      &lt;body&gt;\n    10\t        &lt;h1&gt;Hello VacayBuddy&lt;/h1&gt;\n    11\t        &lt;button onclick=\&quot;window.location.href='/slack/install'\&quot;&gt;Install&lt;/button&gt;\n    12\t      &lt;/body&gt;\n    13\t    &lt;/html&gt;\n    14\t  `;\n    15\t    res.set('Content-Type', 'text/html');\n    16\t    res.send(html);\n    17\t  });\n    18\t};\n...\nPath: jest.config.js\n     1\tmodule.exports = {\n     2\t  preset: 'ts-jest',\n     3\t  testEnvironment: 'node',\n     4\t  roots: ['&lt;rootDir&gt;'],\n     5\t  testMatch: ['**/*.spec.ts', '**/*.test.ts'],\n     6\t  transform: {\n     7\t    '^.+\\\\.tsx?$': ['ts-jest', {\n     8\t      tsconfig: 'tsconfig.jest.json'\n     9\t    }]\n    10\t  },\n    11\t  setupFilesAfterEnv: [\&quot;&lt;rootDir&gt;/tests/config/setup.ts\&quot;],\n    12\t  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],\n    13\t  testTimeout: 15000,\n    14\t};...\nPath: src/routes/excel-template.ts\n...\n     5\t\n     6\texport default (app: Application) =&gt; {\n     7\t  app.get('/download-excel-template', async (req: Request, res: Response) =&gt; {\n     8\t    const { token } = req.query;\n     9\t\n    10\t    if (!token || typeof token !== 'string') {\n    11\t      res.status(400).send('Invalid token');\n    12\t      return;\n    13\t    }\n    14\t\n    15\t    let decoded: { organizationId: string };\n    16\t    try {\n    17\t      decoded = jwt.verify(token, process.env.JWT_SECRET || 'default-secret-key') as { organizationId: string };\n    18\t    } catch (error) {\n    19\t      res.status(401).send('Invalid token');\n    20\t      return;\n    21\t    }\n    22\t\n    23\t    const { organizationId } = decoded;\n    24\t\n    25\t    const users = await organizationService.getUsers(organizationId);\n    26\t\n    27\t    if (users.length === 0) {\n    28\t      res.status(404).send('No users found for this organization');\n    29\t      return;\n    30\t    }\n...\nPath: src/i18n/index.ts\n     1\timport i18next from 'i18next';\n     2\timport { LOCALE_TO_LANG } from '../constants';\n     3\timport enUS from './en-US';\n     4\timport koKR from './ko-KR';\n     5\t\n     6\texport const i18nInitPromise = i18next.init({\n     7\t  lng: 'en-US',\n     8\t  fallbackLng: 'en-US',\n     9\t  resources: {\n    10\t    'en-US': { translation: enUS },\n    11\t    'ko-KR': { translation: koKR },\n    12\t  },\n    13\t  interpolation: {\n    14\t    escapeValue: false,\n    15\t  },\n    16\t});\n    17\t\n    18\texport function t(locale: keyof typeof LOCALE_TO_LANG, key: string, params?: Record&lt;string, string&gt;) {\n    19\t  return i18next.t(key, {\n    20\t    lng: locale,\n    21\t    ...params,\n    22\t  });\n    23\t}\n    24\t\n    25\texport { i18next };\n...\nPath: manifest.json\n...\n    38\t    \&quot;settings\&quot;: {\n    39\t        \&quot;event_subscriptions\&quot;: {\n    40\t            \&quot;bot_events\&quot;: [\n    41\t                \&quot;app_home_opened\&quot;,\n    42\t                \&quot;message.channels\&quot;,\n    43\t                \&quot;message.groups\&quot;,\n    44\t                \&quot;message.im\&quot;,\n    45\t                \&quot;message.mpim\&quot;,\n    46\t                \&quot;file_shared\&quot;\n    47\t            ]\n    48\t        },\n    49\t        \&quot;interactivity\&quot;: {\n    50\t            \&quot;is_enabled\&quot;: true\n    51\t        },\n    52\t        \&quot;org_deploy_enabled\&quot;: false,\n    53\t        \&quot;socket_mode_enabled\&quot;: true,\n    54\t        \&quot;token_rotation_enabled\&quot;: false\n    55\t    }\n    56\t}...\nPath: src/listeners/messages/index.ts\n     1\timport type { App } from '@slack/bolt';\n     2\timport sendWelcomeMessage from './send-welcome-message';\n     3\t\n     4\tconst register = (app: App) =&gt; {\n     5\t  app.message(/.*/, sendWelcomeMessage);\n     6\t};\n     7\t\n     8\texport default { register };\n...\nPath: src/db.ts\n...\n     7\t\n     8\tfunction getDataSourceConfig(): DataSourceOptions {\n     9\t  const dbType = process.env.DB_TYPE || 'sqlite';\n    10\t\n    11\t  const baseConfig: Partial&lt;DataSourceOptions&gt; = {\n    12\t    entities: [entitiesPath],\n    13\t    migrations: [migrationsPath],\n    14\t    synchronize: process.env.DB_SYNC === 'true',\n    15\t    logging: process.env.DB_LOGGING === 'true',\n    16\t    namingStrategy: new SnakeNamingStrategy(),\n    17\t  };\n    18\t\n    19\t  if (dbType === 'mysql') {\n    20\t    return {\n    21\t      ...baseConfig,\n    22\t      type: 'mysql',\n    23\t      host: process.env.DB_HOST || 'localhost',\n    24\t      port: Number.parseInt(process.env.DB_PORT || '3306', 10),\n    25\t      username: process.env.DB_USERNAME,\n    26\t ...&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_012b3X3AHDaFcx23PLn8puUu&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/user/WebstormProjects/vacay-buddy&quot;,&quot;folderRoot&quot;:&quot;/Users/user/WebstormProjects/vacay-buddy&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-22T12:54:00.614Z&quot;,&quot;response_text&quot;:&quot;현재 코드를 보니 Express 애플리케이션에 글로벌 에러 핸들링이 설정되어 있지 않은 상황입니다. 하지만 Express가 종료되지 않는 이유를 확인해보겠습니다.\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;a6c131e0-6882-4200-ae32-e3aa514a030a&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;분석한 결과, 현재 애플리케이션에는 다음과 같은 상황입니다:\n\n## 현재 상황 분석\n\n1. **글로벌 에러 핸들링이 없음**: `process.on('uncaughtException')`, `process.on('unhandledRejection')`, Express 글로벌 에러 미들웨어가 설정되어 있지 않습니다.\n\n2. **Express가 종료되지 않는 이유**:\n   - **개별 try-catch 블록**: 대부분의 비동기 함수들이 개별적으로 try-catch로 감싸져 있어서 에러가 발생해도 로그만 남기고 계속 실행됩니다.\n   - **Slack Bolt 프레임워크의 내장 에러 핸들링**: Slack Bolt는 자체적으로 에러를 처리하고 애플리케이션을 종료시키지 않습니다.\n   - **Express의 기본 동작**: Express는 기본적으로 에러가 발생해도 서버를 종료시키지 않고 계속 실행합니다.\n\n## 주요 에러 처리 패턴들\n\n&lt;augment_code_snippet path=\&quot;src/listeners/events/file-shared.ts\&quot; mode=\&quot;EXCERPT\&quot;&gt;\n```typescript\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n\n    await client.chat.postMessage({\n      channel: event.channel_id,\n      text: t(context.locale, 'file_shared_error', { message: errorMessage }),\n    });\n\n    logger.error(errorMessage);\n  }\n```\n&lt;/augment_code_snippet&gt;\n\n&lt;augment_code_snippet path=\&quot;src/app.ts\&quot; mode=\&quot;EXCERPT\&quot;&gt;\n```typescript\n  } catch (error) {\n    app.logger.error('Unable to start App', error);\n  }\n```\n&lt;/augment_code_snippet&gt;\n\n## 권장사항\n\n글로벌 에러 핸들링을 추가하여 예상치 못한 에러들을 적절히 처리하고, 필요에 따라 애플리케이션을 안전하게 종료할 수 있도록 설정하는 것이 좋겠습니다. 이렇게 하면:\n\n1. **예상치 못한 에러 감지**: 현재 try-catch로 잡히지 않는 에러들을 감지할 수 있습니다.\n2. **로깅 개선**: 모든 에러를 중앙에서 로깅할 수 있습니다.\n3. **안전한 종료**: 심각한 에러 발생 시 애플리케이션을 안전하게 종료할 수 있습니다.\n\n글로벌 에러 핸들링을 추가하시겠습니까?&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;분석한 결과, 현재 애플리케이션에는 다음과 같은 상황입니다:\n\n## 현재 상황 분석\n\n1. **글로벌 에러 핸들링이 없음**: `process.on('uncaughtException')`, `process.on('unhandledRejection')`, Express 글로벌 에러 미들웨어가 설정되어 있지 않습니다.\n\n2. **Express가 종료되지 않는 이유**:\n   - **개별 try-catch 블록**: 대부분의 비동기 함수들이 개별적으로 try-catch로 감싸져 있어서 에러가 발생해도 로그만 남기고 계속 실행됩니다.\n   - **Slack Bolt 프레임워크의 내장 에러 핸들링**: Slack Bolt는 자체적으로 에러를 처리하고 애플리케이션을 종료시키지 않습니다.\n   - **Express의 기본 동작**: Express는 기본적으로 에러가 발생해도 서버를 종료시키지 않고 계속 실행합니다.\n\n## 주요 에러 처리 패턴들\n\n````typescript path=src/listeners/events/file-shared.ts mode=EXCERPT\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n\n    await client.chat.postMessage({\n      channel: event.channel_id,\n      text: t(context.locale, 'file_shared_error', { message: errorMessage }),\n    });\n\n    logger.error(errorMessage);\n  }\n````\n\n````typescript path=src/app.ts mode=EXCERPT\n  } catch (error) {\n    app.logger.error('Unable to start App', error);\n  }\n````\n\n## 권장사항\n\n글로벌 에러 핸들링을 추가하여 예상치 못한 에러들을 적절히 처리하고, 필요에 따라 애플리케이션을 안전하게 종료할 수 있도록 설정하는 것이 좋겠습니다. 이렇게 하면:\n\n1. **예상치 못한 에러 감지**: 현재 try-catch로 잡히지 않는 에러들을 감지할 수 있습니다.\n2. **로깅 개선**: 모든 에러를 중앙에서 로깅할 수 있습니다.\n3. **안전한 종료**: 심각한 에러 발생 시 애플리케이션을 안전하게 종료할 수 있습니다.\n\n글로벌 에러 핸들링을 추가하시겠습니까?\n&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;The following code sections were retrieved:\nPath: src/app.ts\n     1\timport 'reflect-metadata';\n     2\timport { config } from 'dotenv';\n     3\t\n     4\tconfig();\n     5\t\n     6\timport { App, type Context, LogLevel } from '@slack/bolt';\n     7\timport { dataSource } from './db';\n     8\timport type { Organization } from './entity/organization.model';\n     9\timport type { User } from './entity/user.model';\n    10\timport { i18nInitPromise } from './i18n';\n    11\timport registerListeners from './listeners';\n    12\timport registerMiddleware from './middleware';\n    13\t\n    14\texport interface AppContext extends Context {\n    15\t  locale: string;\n    16\t  organization: Organization;\n    17\t  user: User;\n    18\t}\n    19\t\n    20\tconst app = new App({\n    21\t  token: process.env.SLACK_BOT_TOKEN,\n    22\t  appToken: process.env.SLACK_APP_TOKEN,\n    23\t  signingSecret: process.env.SLACK_SIGNING_SECRET,\n    24\t  socketMode: true,\n    25\t  logLevel: LogLevel.DEBUG,\n    26\t});\n    27\t\n    28\t/** Register listeners and middleware */\n    29\tregisterListeners(app);\n    30\tregisterMiddleware(app);\n    31\t\n    32\t/** Start Bolt App */\n    33\t(async () =&gt; {\n    34\t  try {\n    35\t    await i18nInitPromise;\n    36\t    await dataSource.initialize();\n    37\t    await app.start(process.env.PORT || 3000);\n    38\t    app.logger.info('⚡️ Bolt app is running! ⚡️');\n    39\t  } catch (error) {\n    40\t    app.logger.error('Unable to start App', error);\n    41\t  }\n    42\t})();\n...\nPath: src/app-prod.ts\n     1\timport 'reflect-metadata';\n     2\timport { config } from 'dotenv';\n     3\t\n     4\tconfig();\n     5\t\n     6\timport { App } from '@slack/bolt';\n     7\timport { dataSource } from './db';\n     8\timport { i18nInitPromise } from './i18n';\n     9\timport registerListeners from './listeners';\n    10\timport registerMiddleware from './middleware';\n    11\timport receiver from './receiver';\n    12\t\n    13\tconst app = new App({\n    14\t  receiver,\n    15\t});\n    16\t\n    17\t/** Register Listeners */\n    18\tregisterListeners(app);\n    19\tregisterMiddleware(app);\n    20\t\n    21\t/** Start Bolt App */\n    22\t(async () =&gt; {\n    23\t  try {\n    24\t    await i18nInitPromise;\n    25\t    await dataSource.initialize();\n    26\t    await app.start(process.env.PORT || 3000);\n    27\t    app.logger.info('⚡️ Bolt app is running! ⚡️');\n    28\t  } catch (error) {\n    29\t    app.logger.error('Unable to start App', error);\n    30\t  }\n    31\t})();\n...\nPath: src/routes/user-vacation.ts\n...\n    15\t\n    16\t    let decoded: { organizationId: string; userId: string };\n    17\t    try {\n    18\t      decoded = jwt.verify(token, process.env.JWT_SECRET || 'default-secret-key') as {\n    19\t        organizationId: string;\n    20\t        userId: string;\n    21\t      };\n    22\t    } catch (error) {\n    23\t      if (error instanceof jwt.TokenExpiredError) {\n    24\t        const html = `\n    25\t    &lt;!DOCTYPE html&gt;\n    26\t    &lt;html lang=\&quot;ko\&quot;&gt;\n    27\t    &lt;head&gt;\n    28\t      &lt;meta charset=\&quot;UTF-8\&quot;&gt;\n    29\t      &lt;title&gt;만료된 접근&lt;/title&gt;\n    30\t      &lt;style&gt;${expiredTokenStyles}&lt;/style&gt;\n    31\t    &lt;/head&gt;\n    32\t    &lt;body&gt;\n    33\t      &lt;div class=\&quot;container\&quot;&gt;\n    34\t        &lt;h1&gt;접근 시간이 만료되었습니다&lt;/h1&gt;\n    35\t        &lt;div class=\&quot;message\&quot;&gt;\n    36\t          &lt;p&gt;보안상의 이유로 접근 링크가 1시간 후에 만료됩니다.&lt;/p&gt;\n    37\t          &lt;p&gt;슬랙에서 다시 접근해 주세요.&lt;/p&gt;\n    38\t        &lt;/div&gt;\n    39\t      &lt;/div&gt;\n    40\t    &lt;/body&gt;\n    41\t    &lt;/html&gt;\n    42\t    `;\n    43\t        res.set('Content-Type', 'text/html');\n    44\t        res.status(401).send(html);\n    45\t        return;\n    46\t      }\n    47\t\n    48\t      // For other token errors\n    49\t      res.status(401).send('Invalid token');\n    50\t      return;\n    51\t    }\n...\nPath: src/receiver.ts\n     1\timport path from 'node:path';\n     2\timport { ExpressReceiver, LogLevel } from '@slack/bolt';\n     3\timport { WebClient } from '@slack/web-api';\n     4\timport express from 'express';\n     5\timport { buildInstallMessage } from './listeners/events/slack-ui/build-install-message';\n     6\timport routes from './routes';\n     7\timport { organizationService, ptoService, userService } from './service';\n     8\timport { assert } from './utils';\n     9\t\n    10\tconst receiver = new ExpressReceiver({\n    11\t  logLevel: LogLevel.INFO,\n    12\t  signingSecret: process.env.SLACK_SIGNING_SECRET || '',\n    13\t  clientId: process.env.SLACK_CLIENT_ID,\n    14\t  clientSecret: process.env.SLACK_CLIENT_SECRET,\n    15\t  stateSecret: process.env.SLACK_STATE_SECRET,\n    16\t  scopes: process.env.SLACK_SCOPES?.split(',') || [],\n    17\t  installationStore: {\n    18\t    storeInstallation: async (installation) =&gt; {\n    19\t      const organizationId = installation.enterprise?.id || installation.team?.id;\n    20\t\n    21\t      assert(organizationId !== undefined, 'Organization ID is undefined');\n    22\t      assert(installation.bot !== undefined, 'Bot installation is undefined');\n    23\t      assert(installation.appId !== undefined, 'App ID is undefined');\n    24\t\n    25\t      const client = new WebClient(installation.bot.token);\n    26\t      const result = await client.users.info({\n    27\t        user: installation.user.id,\n    28\t        include_locale: true,\n    29\t      });\n    30\t\n    31\t      const locale = result.user?.locale || 'en-US';\n    32\t\n    33\t      const organization = await organizationService.getOrganization(organizationId);\n    34\t      if (organization) {\n    35\t        await organizationService.deleteOrganization(organizationId);\n    36\t      }\n    37\t\n    38\t      // create organization, user, and default pto templates\n    39\t      const newOrganization = await organizationService.createOrganization(\n    40\t        organizationId,\n    41\t        installation.isEnterpriseInstall !== undefined,\n    42\t        JSON.stringify(installation),\n    43\t      );\n    44\t      await ptoService.createDefaultPtoTemplates(locale, newOrganization);\n    45\t      const installer = await userService.getOrCreateUser(installation.user.id, newOrganization, true);\n    46\t\n    47\t      // Create users for all team members\n    48\t      await organizationService.importTeamMembers(installation.bot.token, newOrganization);\n    49\t\n    50\t      // send welcome message to the installer\n    51\t      await client.chat.postMessage({\n    52\t        channel: installer.userId,\n    53\t        text: `Hello &lt;@${installer.userId}&gt;! Thanks for installing the app!`,\n    54\t        blocks: buildInstallMessage(locale, newOrganization.organizationId, installation.appId),\n    55\t      });\n    56\t    },\n    57\t\n    58\t    fetchInstallation: async (installQuery) =&gt; {\n    59\t      const organizationId = installQuery.enterpriseId || installQuery.teamId;\n    60\t      assert(organizationId !== undefined, 'Organization ID is undefined');\n    61\t\n    62\t      const organization = await organizationService.getOrganization(organizationId);\n    63\t      assert(organization !== null, 'Organization not found');\n    64\t\n    65\t      return JSON.parse(organization.installation);\n    66\t    },\n    67\t    deleteInstallation: async (installQuery) =&gt; {\n    68\t      const organizationId = installQuery.enterpriseId || installQuery.teamId;\n    69\t      assert(organizationId !== undefined, 'Organization ID is undefined');\n    70\t      await organizationService.deleteOrganization(organizationId);\n    71\t    },\n    72\t  },\n    73\t  installerOptions: {\n    74\t    directInstall: true,\n    75\t    redirectUriPath: '/slack/oauth_redirect',\n    76\t  },\n    77\t});\n    78\t\n    79\t// Serve static assets (CSS, JS, fonts) from the public directory\n    80\treceiver.app.use('/assets', express.static(path.join(process.cwd(), 'public/assets')));\n    81\t\n    82\troutes.register(receiver.app);\n    83\t\n    84\texport default receiver;\n...\nPath: src/listeners/events/file-shared.ts\n...\n     9\t\n    10\tconst fileShared = async ({\n    11\t  client,\n    12\t  event,\n    13\t  logger,\n    14\t  context,\n    15\t}: AllMiddlewareArgs&lt;AppContext&gt; &amp; SlackEventMiddlewareArgs&lt;'file_shared'&gt;) =&gt; {\n    16\t  try {\n    17\t    const fileId = event.file_id;\n    18\t    const fileInfo = await client.files.info({ file: fileId });\n    19\t\n    20\t    if (!fileInfo.file) {\n    21\t      return;\n    22\t    }\n    23\t\n    24\t    const fileUrl = fileInfo.file.url_private_download;\n    25\t\n    26\t    // download file\n    27\t    const response = await axios({\n    28\t      method: 'get',\n    29\t      url: fileUrl,\n    30\t      headers: {\n    31\t        Authorization: `Bearer ${context.botToken}`,\n    32\t      },\n    33\t      responseType: 'arraybuffer',\n    34\t    });\n    35\t\n    36\t    if (response.status !== 200) {\n    37\t      logger.error(`Failed to download file: ${response.statusText}`);\n    38\t      return;\n    39\t    }\n...\n    83\t\n    84\t    await client.chat.postMessage({\n    85\t      channel: event.channel_id,\n    86\t      text: `✅ ${t(context.locale, 'users_updated_success', { count: updatedCount.toString() })}`,\n    87\t    });\n    88\t  } catch (error) {\n    89\t    const errorMessage = error instanceof Error ? error.message : String(error);\n    90\t\n    91\t    await client.chat.postMessage({\n    92\t      channel: event.channel_id,\n    93\t      text: t(context.locale, 'file_shared_error', { message: errorMessage }),\n    94\t    });\n    95\t\n    96\t    logger.error(errorMessage);\n    97\t  }\n    98\t};\n    99\t\n   100\texport default fileShared;\n...\nPath: src/listeners/events/index.ts\n     1\timport type { App } from '@slack/bolt';\n     2\timport appHomeOpenedCallback from './app-home-opened';\n     3\timport fileShared from './file-shared';\n     4\t\n     5\tconst register = (app: App) =&gt; {\n     6\t  app.event('app_home_opened', appHomeOpenedCallback);\n     7\t  app.event('file_shared', fileShared);\n     8\t};\n     9\t\n    10\texport default { register };\n...\nPath: src/routes/team-vacation.ts\n...\n    14\t\n    15\t    let decoded: { organizationId: string; userId?: string };\n    16\t    try {\n    17\t      decoded = jwt.verify(token, process.env.JWT_SECRET || 'default-secret-key') as {\n    18\t        organizationId: string;\n    19\t        userId?: string;\n    20\t      };\n    21\t    } catch (error) {\n    22\t      if (error instanceof jwt.TokenExpiredError) {\n    23\t        const html = `\n    24\t    &lt;!DOCTYPE html&gt;\n    25\t    &lt;html lang=\&quot;ko\&quot;&gt;\n    26\t    &lt;head&gt;\n    27\t      &lt;meta charset=\&quot;UTF-8\&quot;&gt;\n    28\t      &lt;title&gt;만료된 접근&lt;/title&gt;\n    29\t      &lt;style&gt;${expiredTokenStyles}&lt;/style&gt;\n    30\t    &lt;/head&gt;\n    31\t    &lt;body&gt;\n    32\t      &lt;div class=\&quot;container\&quot;&gt;\n    33\t        &lt;h1&gt;접근 시간이 만료되었습니다&lt;/h1&gt;\n    34\t        &lt;div class=\&quot;message\&quot;&gt;\n    35\t          &lt;p&gt;보안상의 이유로 접근 링크가 1시간 후에 만료됩니다.&lt;/p&gt;\n    36\t          &lt;p&gt;슬랙 \&quot;팀 연차 현황 보기 버튼\&quot;을 통해 다시 접근해 주세요.&lt;/p&gt;\n    37\t        &lt;/div&gt;\n    38\t      &lt;/div&gt;\n    39\t    &lt;/body&gt;\n    40\t    &lt;/html&gt;\n    41\t    `;\n    42\t        res.set('Content-Type', 'text/html');\n    43\t        res.status(401).send(html);\n    44\t        return;\n    45\t      }\n    46\t\n    47\t      // For other token errors\n    48\t      res.status(401).send('Invalid token');\n    49\t      return;\n    50\t    }\n...\nPath: src/middleware.ts\n     1\timport type { AllMiddlewareArgs, App } from '@slack/bolt';\n     2\timport type { AppContext } from './app';\n     3\timport type { Organization } from './entity/organization.model';\n     4\timport { organizationService, userService } from './service';\n     5\timport { assert } from './utils';\n     6\t\n     7\tconst loadAppContext = async ({ context, client, next }: AllMiddlewareArgs&lt;AppContext&gt;) =&gt; {\n     8\t  const organizationId = context.teamId || context.enterpriseId;\n     9\t  assert(organizationId !== undefined, 'Organization ID is undefined');\n    10\t\n    11\t  if (!organizationId || !context.userId) {\n    12\t    return await next();\n    13\t  }\n    14\t\n    15\t  const organization: Organization = await organizationService.getOrCreateOrganization(\n    16\t    organizationId,\n    17\t    context.enterpriseId !== undefined,\n    18\t  );\n    19\t\n    20\t  const result = await client.users.info({\n    21\t    user: context.userId,\n    22\t    include_locale: true,\n    23\t  });\n    24\t\n    25\t  context.locale = result.user?.locale ?? 'en-US';\n    26\t  context.organization = organization;\n    27\t  context.user = await userService.getOrCreateUser(context.userId, context.organization);\n    28\t\n    29\t  if (context.user.name !== result.user?.real_name) {\n    30\t    context.user.name = result.user?.real_name ?? '';\n    31\t    await userService.updateUser(context.userId, {\n    32\t      ...context.user,\n    33\t      name: context.user.name,\n    34\t    });\n    35\t  }\n    36\t\n    37\t  await next();\n    38\t};\n    39\t\n    40\tconst registerMiddleware = (app: App) =&gt; {\n    41\t  app.use(loadAppContext);\n    42\t};\n    43\t\n    44\texport default registerMiddleware;\n...\nPath: src/listeners/index.ts\n     1\timport type { App } from '@slack/bolt';\n     2\timport actions from './actions';\n     3\timport commands from './commands';\n     4\timport events from './events';\n     5\timport messages from './messages';\n     6\timport shortcuts from './shortcuts';\n     7\timport views from './views';\n     8\t\n     9\tconst registerListeners = (app: App) =&gt; {\n    10\t  actions.register(app);\n    11\t  commands.register(app);\n    12\t  events.register(app);\n    13\t  messages.register(app);\n    14\t  shortcuts.register(app);\n    15\t  views.register(app);\n    16\t};\n    17\t\n    18\texport default registerListeners;\n...\nPath: src/listeners/events/app-home-opened.ts\n...\n     8\t\n     9\tconst appHomeOpenedCallback = async ({\n    10\t  client,\n    11\t  event,\n    12\t  logger,\n    13\t  context,\n    14\t}: AllMiddlewareArgs&lt;AppContext&gt; &amp; SlackEventMiddlewareArgs&lt;'app_home_opened'&gt;) =&gt; {\n    15\t  if (event.tab !== 'messages') {\n    16\t    return;\n    17\t  }\n    18\t\n    19\t  const admins = await organizationService.getAdmins(context.organization);\n    20\t  const blocks: AnyBlock[] = await buildAppHome(context, showAdminSection(context.user, admins));\n    21\t\n    22\t  const view: HomeView = {\n    23\t    type: 'home',\n    24\t    blocks: blocks,\n    25\t  };\n    26\t\n    27\t  await client.views.publish({\n    28\t    user_id: event.user,\n    29\t    view,\n    30\t  });\n    31\t};\n    32\t\n    33\texport default appHomeOpenedCallback;\n...\nPath: src/listeners/actions/update-back-to-home.ts\n...\n     8\t\n     9\texport const updateBackToHome = async ({\n    10\t  ack,\n    11\t  client,\n    12\t  body,\n    13\t  context,\n    14\t}: AllMiddlewareArgs&lt;AppContext&gt; &amp; SlackActionMiddlewareArgs&lt;BlockAction&gt;) =&gt; {\n    15\t  await ack();\n    16\t\n    17\t  const admins = await organizationService.getAdmins(context.organization);\n    18\t  const blocks: AnyBlock[] = await buildAppHome(context, showAdminSection(context.user, admins));\n    19\t  const view: HomeView = {\n    20\t    type: 'home',\n    21\t    blocks: blocks,\n    22\t  };\n    23\t\n    24\t  await client.views.publish({\n    25\t    user_id: body.user.id,\n    26\t    view,\n    27\t  });\n    28\t};\n...\nPath: src/listeners/actions/open-admin-modal.ts\n...\n     7\t\n     8\texport const openAdminModal = async ({\n     9\t  ack,\n    10\t  client,\n    11\t  body,\n    12\t  context,\n    13\t}: AllMiddlewareArgs&lt;AppContext&gt; &amp; SlackActionMiddlewareArgs&lt;BlockAction&gt;) =&gt; {\n    14\t  await ack();\n    15\t\n    16\t  const currentAdmins = await organizationService.getAdmins(context.organization);\n    17\t  const blocks = await buildAdminModal(context, currentAdmins);\n    18\t\n    19\t  await client.views.open({\n    20\t    trigger_id: body.trigger_id,\n    21\t    view: {\n    22\t      type: 'modal',\n    23\t      callback_id: ActionId.SUBMIT_ADMIN_MANAGE,\n    24\t      title: { type: 'plain_text', text: t(context.locale, 'manage_admins_title') },\n    25\t      blocks: blocks,\n    26\t      submit: {\n    27\t        type: 'plain_text',\n    28\t        text: t(context.locale, 'submit'),\n    29\t      },\n    30\t      close: {\n    31\t        type: 'plain_text',\n    32\t        text: t(context.locale, 'cancel'),\n    33\t      },\n    34\t    },\n    35\t  });\n    36\t};\n...\nPath: src/listeners/messages/index.ts\n     1\timport type { App } from '@slack/bolt';\n     2\timport sendWelcomeMessage from './send-welcome-message';\n     3\t\n     4\tconst register = (app: App) =&gt; {\n     5\t  app.message(/.*/, sendWelcomeMessage);\n     6\t};\n     7\t\n     8\texport default { register };\n...\nPath: package.json\n     1\t{\n     2\t  \&quot;name\&quot;: \&quot;vacaybuddy\&quot;,\n     3\t  \&quot;version\&quot;: \&quot;1.0.0\&quot;,\n     4\t  \&quot;description\&quot;: \&quot;A Slack app for easily requesting, approving, and managing PTO directly within Slack\&quot;,\n     5\t  \&quot;main\&quot;: \&quot;dist/app.js\&quot;,\n     6\t  \&quot;scripts\&quot;: {\n     7\t    \&quot;build\&quot;: \&quot;tsc\&quot;,\n     8\t    \&quot;start\&quot;: \&quot;npm run build &amp;&amp; node ./dist/src/app-prod.js\&quot;,\n     9\t    \&quot;lint\&quot;: \&quot;npx @biomejs/biome check src\&quot;,\n    10\t    \&quot;lint:fix\&quot;: \&quot;npx @biomejs/biome check --write src\&quot;,\n    11\t    \&quot;test\&quot;: \&quot;npm run build &amp;&amp; npm run lint &amp;&amp; npm run test:jest\&quot;,\n    12\t    \&quot;dev-socket\&quot;: \&quot;nodemon --ext ts --exec ts-node src/app.ts\&quot;,\n    13\t    \&quot;dev-http\&quot;: \&quot;nodemon --ext ts --exec ts-node src/app-prod.ts\&quot;,\n    14\t    \&quot;typeorm\&quot;: \&quot;typeorm-ts-node-commonjs\&quot;,\n    15\t    \&quot;test:jest\&quot;: \&quot;jest\&quot;,\n    16\t    \&quot;migration:generate\&quot;: \&quot;ts-node --require dotenv/config ./node_modules/typeorm/cli.js migration:generate src/migration/migration/ -d src/db.ts\&quot;,\n...\nPath: manifest.json\n...\n    38\t    \&quot;settings\&quot;: {\n    39\t        \&quot;event_subscriptions\&quot;: {\n    40\t            \&quot;bot_events\&quot;: [\n    41\t                \&quot;app_home_opened\&quot;,\n    42\t                \&quot;message.channels\&quot;,\n    43\t                \&quot;message.groups\&quot;,\n    44\t                \&quot;message.im\&quot;,\n    45\t                \&quot;message.mpim\&quot;,\n    46\t                \&quot;file_shared\&quot;\n    47\t            ]\n    48\t        },\n    49\t        \&quot;interactivity\&quot;: {\n    50\t            \&quot;is_enabled\&quot;: true\n    51\t        },\n    52\t        \&quot;org_deploy_enabled\&quot;: false,\n    53\t        \&quot;socket_mode_enabled\&quot;: true,\n    54\t        \&quot;token_rotation_enabled\&quot;: false\n    55\t    }\n    56\t}...\nPath: src/listeners/commands/sample-command.ts\n     1\timport type { AllMiddlewareArgs, SlackCommandMiddlewareArgs } from '@slack/bolt';\n     2\t\n     3\tconst sampleCommandCallback = async ({ ack, respond, logger }: AllMiddlewareArgs &amp; SlackCommandMiddlewareArgs) =&gt; {\n     4\t  try {\n     5\t    await ack();\n     6\t    await respond('Responding to the sample command!');\n     7\t  } catch (error) {\n     8\t    logger.error(error);\n     9\t  }\n    10\t};\n    11\t\n    12\texport default sampleCommandCallback;\n...\nPath: src/listeners/views/index.ts\n     1\timport type { App } from '@slack/bolt';\n     2\timport { ActionId } from '../../constants';\n     3\timport submitAdminManage from './submit-admin-manage';\n     4\timport submitDecisionRequest from './submit-decision-request';\n     5\timport submitPtoRequest from './submit-pto-request';\n     6\timport submitPtoTemplateManage from './submit-pto-template-manage';\n     7\t\n     8\tconst register = (app: App) =&gt; {\n     9\t  app.view(ActionId.SUBMIT_ADMIN_MANAGE, submitAdminManage);\n    10\t  app.view(ActionId.SUBMIT_PTO_TEMPLATE_MANAGE, submitPtoTemplateManage);\n    11\t  app.view(ActionId.SUBMIT_PTO_REQUEST, submitPtoRequest);\n    12\t  app.view(ActionId.SUBMIT_DECISION_REQUEST, submitDecisionRequest);\n    13\t};\n    14\t\n    15\texport default { register };\n...\nPath: src/listeners/views/submit-decision-request.ts\n...\n    52\t\n    53\t  // Notify requester of the decision\n    54\t  await client.chat.postMessage({\n    55\t    channel: approval.ptoRequest.user.userId,\n    56\t    blocks: buildDecisionSection(context, approval.ptoRequest),\n    57\t  });\n    58\t\n    59\t  const admins = await organizationService.getAdmins(context.organization);\n    60\t  const blocks: AnyBlock[] = await buildAppHome(context, showAdminSection(context.user, admins));\n    61\t  const homeView: HomeView = {\n    62\t    type: 'home',\n    63\t    blocks: blocks,\n    64\t  };\n    65\t\n    66\t  await ack({\n    67\t    response_action: 'clear',\n    68\t  });\n    69\t\n    70\t  // if the request is from home tab, else it's from message\n    71\t  if (privateMetadata.viewId) {\n    72\t    await client.views.update({\n    73\t      view_id: privateMetadata.viewId,\n    74\t      hash: privateMetadata.viewHash,\n    75\t      view: homeView,\n    76\t    });\n    77\t  }\n    7...&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_01Tx9sKS36yxHyyLJa4t79eW&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/user/WebstormProjects/vacay-buddy&quot;,&quot;folderRoot&quot;:&quot;/Users/user/WebstormProjects/vacay-buddy&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-22T12:54:12.889Z&quot;,&quot;response_text&quot;:&quot;분석한 결과, 현재 애플리케이션에는 다음과 같은 상황입니다:\n\n## 현재 상황 분석\n\n1. **글로벌 에러 핸들링이 없음**: `process.on('uncaughtException')`, `process.on('unhandledRejection')`, Express 글로벌 에러 미들웨어가 설정되어 있지 않습니다.\n\n2. **Express가 종료되지 않는 이유**:\n   - **개별 try-catch 블록**: 대부분의 비동기 함수들이 개별적으로 try-catch로 감싸져 있어서 에러가 발생해도 로그만 남기고 계속 실행됩니다.\n   - **Slack Bolt 프레임워크의 내장 에러 핸들링**: Slack Bolt는 자체적으로 에러를 처리하고 애플리케이션을 종료시키지 않습니다.\n   - **Express의 기본 동작**: Express는 기본적으로 에러가 발생해도 서버를 종료시키지 않고 계속 실행합니다.\n\n## 주요 에러 처리 패턴들\n\n````typescript path=src/listeners/events/file-shared.ts mode=EXCERPT\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n\n    await client.chat.postMessage({\n      channel: event.channel_id,\n      text: t(context.locale, 'file_shared_error', { message: errorMessage }),\n    });\n\n    logger.error(errorMessage);\n  }\n````\n\n````typescript path=src/app.ts mode=EXCERPT\n  } catch (error) {\n    app.logger.error('Unable to start App', error);\n  }\n````\n\n## 권장사항\n\n글로벌 에러 핸들링을 추가하여 예상치 못한 에러들을 적절히 처리하고, 필요에 따라 애플리케이션을 안전하게 종료할 수 있도록 설정하는 것이 좋겠습니다. 이렇게 하면:\n\n1. **예상치 못한 에러 감지**: 현재 try-catch로 잡히지 않는 에러들을 감지할 수 있습니다.\n2. **로깅 개선**: 모든 에러를 중앙에서 로깅할 수 있습니다.\n3. **안전한 종료**: 심각한 에러 발생 시 애플리케이션을 안전하게 종료할 수 있습니다.\n\n글로벌 에러 핸들링을 추가하시겠습니까?\n&quot;,&quot;workspace_file_chunks&quot;:[]}],&quot;feedbackStates&quot;:{&quot;temp-fe-cb61a0da-d214-4903-9cbf-80700d0a6ece&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-0ce347b6-29ce-40b8-8acf-9006de72b23a&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-7893a8a1-4e99-44f2-9894-14c5137f9e4e&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;}},&quot;toolUseStates&quot;:{&quot;2ad7fc4a-5627-4d8d-bd9b-718baf0bf943;toolu_012b3X3AHDaFcx23PLn8puUu&quot;:{&quot;requestId&quot;:&quot;2ad7fc4a-5627-4d8d-bd9b-718baf0bf943&quot;,&quot;toolUseId&quot;:&quot;toolu_012b3X3AHDaFcx23PLn8puUu&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;The following code sections were retrieved:\nPath: src/app-prod.ts\n     1\timport 'reflect-metadata';\n     2\timport { config } from 'dotenv';\n     3\t\n     4\tconfig();\n     5\t\n     6\timport { App } from '@slack/bolt';\n     7\timport { dataSource } from './db';\n     8\timport { i18nInitPromise } from './i18n';\n     9\timport registerListeners from './listeners';\n    10\timport registerMiddleware from './middleware';\n    11\timport receiver from './receiver';\n    12\t\n    13\tconst app = new App({\n    14\t  receiver,\n    15\t});\n    16\t\n    17\t/** Register Listeners */\n    18\tregisterListeners(app);\n    19\tregisterMiddleware(app);\n    20\t\n    21\t/** Start Bolt App */\n    22\t(async () =&gt; {\n    23\t  try {\n    24\t    await i18nInitPromise;\n    25\t    await dataSource.initialize();\n    26\t    await app.start(process.env.PORT || 3000);\n    27\t    app.logger.info('⚡️ Bolt app is running! ⚡️');\n    28\t  } catch (error) {\n    29\t    app.logger.error('Unable to start App', error);\n    30\t  }\n    31\t})();\n...\nPath: src/app.ts\n     1\timport 'reflect-metadata';\n     2\timport { config } from 'dotenv';\n     3\t\n     4\tconfig();\n     5\t\n     6\timport { App, type Context, LogLevel } from '@slack/bolt';\n     7\timport { dataSource } from './db';\n     8\timport type { Organization } from './entity/organization.model';\n     9\timport type { User } from './entity/user.model';\n    10\timport { i18nInitPromise } from './i18n';\n    11\timport registerListeners from './listeners';\n    12\timport registerMiddleware from './middleware';\n    13\t\n    14\texport interface AppContext extends Context {\n    15\t  locale: string;\n    16\t  organization: Organization;\n    17\t  user: User;\n    18\t}\n    19\t\n    20\tconst app = new App({\n    21\t  token: process.env.SLACK_BOT_TOKEN,\n    22\t  appToken: process.env.SLACK_APP_TOKEN,\n    23\t  signingSecret: process.env.SLACK_SIGNING_SECRET,\n    24\t  socketMode: true,\n    25\t  logLevel: LogLevel.DEBUG,\n    26\t});\n    27\t\n    28\t/** Register listeners and middleware */\n    29\tregisterListeners(app);\n    30\tregisterMiddleware(app);\n    31\t\n    32\t/** Start Bolt App */\n    33\t(async () =&gt; {\n    34\t  try {\n    35\t    await i18nInitPromise;\n    36\t    await dataSource.initialize();\n    37\t    await app.start(process.env.PORT || 3000);\n    38\t    app.logger.info('⚡️ Bolt app is running! ⚡️');\n    39\t  } catch (error) {\n    40\t    app.logger.error('Unable to start App', error);\n    41\t  }\n    42\t})();\n...\nPath: src/receiver.ts\n     1\timport path from 'node:path';\n     2\timport { ExpressReceiver, LogLevel } from '@slack/bolt';\n     3\timport { WebClient } from '@slack/web-api';\n     4\timport express from 'express';\n     5\timport { buildInstallMessage } from './listeners/events/slack-ui/build-install-message';\n     6\timport routes from './routes';\n     7\timport { organizationService, ptoService, userService } from './service';\n     8\timport { assert } from './utils';\n     9\t\n    10\tconst receiver = new ExpressReceiver({\n    11\t  logLevel: LogLevel.INFO,\n    12\t  signingSecret: process.env.SLACK_SIGNING_SECRET || '',\n    13\t  clientId: process.env.SLACK_CLIENT_ID,\n    14\t  clientSecret: process.env.SLACK_CLIENT_SECRET,\n    15\t  stateSecret: process.env.SLACK_STATE_SECRET,\n    16\t  scopes: process.env.SLACK_SCOPES?.split(',') || [],\n    17\t  installationStore: {\n    18\t    storeInstallation: async (installation) =&gt; {\n    19\t      const organizationId = installation.enterprise?.id || installation.team?.id;\n    20\t\n    21\t      assert(organizationId !== undefined, 'Organization ID is undefined');\n    22\t      assert(installation.bot !== undefined, 'Bot installation is undefined');\n    23\t      assert(installation.appId !== undefined, 'App ID is undefined');\n    24\t\n    25\t      const client = new WebClient(installation.bot.token);\n    26\t      const result = await client.users.info({\n    27\t        user: installation.user.id,\n    28\t        include_locale: true,\n    29\t      });\n    30\t\n    31\t      const locale = result.user?.locale || 'en-US';\n    32\t\n    33\t      const organization = await organizationService.getOrganization(organizationId);\n    34\t      if (organization) {\n    35\t        await organizationService.deleteOrganization(organizationId);\n    36\t      }\n    37\t\n    38\t      // create organization, user, and default pto templates\n    39\t      const newOrganization = await organizationService.createOrganization(\n    40\t        organizationId,\n    41\t        installation.isEnterpriseInstall !== undefined,\n    42\t        JSON.stringify(installation),\n    43\t      );\n    44\t      await ptoService.createDefaultPtoTemplates(locale, newOrganization);\n    45\t      const installer = await userService.getOrCreateUser(installation.user.id, newOrganization, true);\n    46\t\n    47\t      // Create users for all team members\n    48\t      await organizationService.importTeamMembers(installation.bot.token, newOrganization);\n    49\t\n    50\t      // send welcome message to the installer\n    51\t      await client.chat.postMessage({\n    52\t        channel: installer.userId,\n    53\t        text: `Hello &lt;@${installer.userId}&gt;! Thanks for installing the app!`,\n    54\t        blocks: buildInstallMessage(locale, newOrganization.organizationId, installation.appId),\n    55\t      });\n    56\t    },\n    57\t\n    58\t    fetchInstallation: async (installQuery) =&gt; {\n    59\t      const organizationId = installQuery.enterpriseId || installQuery.teamId;\n    60\t      assert(organizationId !== undefined, 'Organization ID is undefined');\n    61\t\n    62\t      const organization = await organizationService.getOrganization(organizationId);\n    63\t      assert(organization !== null, 'Organization not found');\n    64\t\n    65\t      return JSON.parse(organization.installation);\n    66\t    },\n    67\t    deleteInstallation: async (installQuery) =&gt; {\n    68\t      const organizationId = installQuery.enterpriseId || installQuery.teamId;\n    69\t      assert(organizationId !== undefined, 'Organization ID is undefined');\n    70\t      await organizationService.deleteOrganization(organizationId);\n    71\t    },\n    72\t  },\n    73\t  installerOptions: {\n    74\t    directInstall: true,\n    75\t    redirectUriPath: '/slack/oauth_redirect',\n    76\t  },\n    77\t});\n    78\t\n    79\t// Serve static assets (CSS, JS, fonts) from the public directory\n    80\treceiver.app.use('/assets', express.static(path.join(process.cwd(), 'public/assets')));\n    81\t\n    82\troutes.register(receiver.app);\n    83\t\n    84\texport default receiver;\n...\nPath: src/middleware.ts\n     1\timport type { AllMiddlewareArgs, App } from '@slack/bolt';\n     2\timport type { AppContext } from './app';\n     3\timport type { Organization } from './entity/organization.model';\n     4\timport { organizationService, userService } from './service';\n     5\timport { assert } from './utils';\n     6\t\n     7\tconst loadAppContext = async ({ context, client, next }: AllMiddlewareArgs&lt;AppContext&gt;) =&gt; {\n     8\t  const organizationId = context.teamId || context.enterpriseId;\n     9\t  assert(organizationId !== undefined, 'Organization ID is undefined');\n    10\t\n    11\t  if (!organizationId || !context.userId) {\n    12\t    return await next();\n    13\t  }\n    14\t\n    15\t  const organization: Organization = await organizationService.getOrCreateOrganization(\n    16\t    organizationId,\n    17\t    context.enterpriseId !== undefined,\n    18\t  );\n    19\t\n    20\t  const result = await client.users.info({\n    21\t    user: context.userId,\n    22\t    include_locale: true,\n    23\t  });\n    24\t\n    25\t  context.locale = result.user?.locale ?? 'en-US';\n    26\t  context.organization = organization;\n    27\t  context.user = await userService.getOrCreateUser(context.userId, context.organization);\n    28\t\n    29\t  if (context.user.name !== result.user?.real_name) {\n    30\t    context.user.name = result.user?.real_name ?? '';\n    31\t    await userService.updateUser(context.userId, {\n    32\t      ...context.user,\n    33\t      name: context.user.name,\n    34\t    });\n    35\t  }\n    36\t\n    37\t  await next();\n    38\t};\n    39\t\n    40\tconst registerMiddleware = (app: App) =&gt; {\n    41\t  app.use(loadAppContext);\n    42\t};\n    43\t\n    44\texport default registerMiddleware;\n...\nPath: src/routes/user-vacation.ts\n...\n    15\t\n    16\t    let decoded: { organizationId: string; userId: string };\n    17\t    try {\n    18\t      decoded = jwt.verify(token, process.env.JWT_SECRET || 'default-secret-key') as {\n    19\t        organizationId: string;\n    20\t        userId: string;\n    21\t      };\n    22\t    } catch (error) {\n    23\t      if (error instanceof jwt.TokenExpiredError) {\n    24\t        const html = `\n    25\t    &lt;!DOCTYPE html&gt;\n    26\t    &lt;html lang=\&quot;ko\&quot;&gt;\n    27\t    &lt;head&gt;\n    28\t      &lt;meta charset=\&quot;UTF-8\&quot;&gt;\n    29\t      &lt;title&gt;만료된 접근&lt;/title&gt;\n    30\t      &lt;style&gt;${expiredTokenStyles}&lt;/style&gt;\n    31\t    &lt;/head&gt;\n    32\t    &lt;body&gt;\n    33\t      &lt;div class=\&quot;container\&quot;&gt;\n    34\t        &lt;h1&gt;접근 시간이 만료되었습니다&lt;/h1&gt;\n    35\t        &lt;div class=\&quot;message\&quot;&gt;\n    36\t          &lt;p&gt;보안상의 이유로 접근 링크가 1시간 후에 만료됩니다.&lt;/p&gt;\n    37\t          &lt;p&gt;슬랙에서 다시 접근해 주세요.&lt;/p&gt;\n    38\t        &lt;/div&gt;\n    39\t      &lt;/div&gt;\n    40\t    &lt;/body&gt;\n    41\t    &lt;/html&gt;\n    42\t    `;\n    43\t        res.set('Content-Type', 'text/html');\n    44\t        res.status(401).send(html);\n    45\t        return;\n    46\t      }\n    47\t\n    48\t      // For other token errors\n    49\t      res.status(401).send('Invalid token');\n    50\t      return;\n    51\t    }\n...\nPath: src/routes/team-vacation.ts\n     1\timport { Application, Request, Response } from 'express';\n     2\timport jwt from 'jsonwebtoken';\n     3\timport { organizationService, ptoService } from '../service';\n     4\timport { commonStyles, expiredTokenStyles } from './css';\n     5\t\n     6\texport default (app: Application) =&gt; {\n     7\t  app.get('/team-vacation-html', async (req: Request, res: Response) =&gt; {\n     8\t    const { token } = req.query;\n     9\t\n    10\t    if (!token || typeof token !== 'string') {\n    11\t      res.status(400).send('Invalid token');\n    12\t      return;\n    13\t    }\n    14\t\n    15\t    let decoded: { organizationId: string; userId?: string };\n    16\t    try {\n    17\t      decoded = jwt.verify(token, process.env.JWT_SECRET || 'default-secret-key') as {\n    18\t        organizationId: string;\n    19\t        userId?: string;\n    20\t      };\n    21\t    } catch (error) {\n    22\t      if (error instanceof jwt.TokenExpiredError) {\n    23\t        const html = `\n    24\t    &lt;!DOCTYPE html&gt;\n    25\t    &lt;html lang=\&quot;ko\&quot;&gt;\n    26\t    &lt;head&gt;\n    27\t      &lt;meta charset=\&quot;UTF-8\&quot;&gt;\n    28\t      &lt;title&gt;만료된 접근&lt;/title&gt;\n    29\t      &lt;style&gt;${expiredTokenStyles}&lt;/style&gt;\n    30\t    &lt;/head&gt;\n    31\t    &lt;body&gt;\n    32\t      &lt;div class=\&quot;container\&quot;&gt;\n    33\t        &lt;h1&gt;접근 시간이 만료되었습니다&lt;/h1&gt;\n    34\t        &lt;div class=\&quot;message\&quot;&gt;\n    35\t          &lt;p&gt;보안상의 이유로 접근 링크가 1시간 후에 만료됩니다.&lt;/p&gt;\n    36\t          &lt;p&gt;슬랙 \&quot;팀 연차 현황 보기 버튼\&quot;을 통해 다시 접근해 주세요.&lt;/p&gt;\n    37\t        &lt;/div&gt;\n    38\t      &lt;/div&gt;\n    39\t    &lt;/body&gt;\n    40\t    &lt;/html&gt;\n    41\t    `;\n    42\t        res.set('Content-Type', 'text/html');\n    43\t        res.status(401).send(html);\n    44\t        return;\n    45\t      }\n    46\t\n    47\t      // For other token errors\n    48\t      res.status(401).send('Invalid token');\n    49\t      return;\n    50\t    }\n...\nPath: package.json\n     1\t{\n     2\t  \&quot;name\&quot;: \&quot;vacaybuddy\&quot;,\n     3\t  \&quot;version\&quot;: \&quot;1.0.0\&quot;,\n     4\t  \&quot;description\&quot;: \&quot;A Slack app for easily requesting, approving, and managing PTO directly within Slack\&quot;,\n     5\t  \&quot;main\&quot;: \&quot;dist/app.js\&quot;,\n     6\t  \&quot;scripts\&quot;: {\n     7\t    \&quot;build\&quot;: \&quot;tsc\&quot;,\n     8\t    \&quot;start\&quot;: \&quot;npm run build &amp;&amp; node ./dist/src/app-prod.js\&quot;,\n     9\t    \&quot;lint\&quot;: \&quot;npx @biomejs/biome check src\&quot;,\n    10\t    \&quot;lint:fix\&quot;: \&quot;npx @biomejs/biome check --write src\&quot;,\n    11\t    \&quot;test\&quot;: \&quot;npm run build &amp;&amp; npm run lint &amp;&amp; npm run test:jest\&quot;,\n    12\t    \&quot;dev-socket\&quot;: \&quot;nodemon --ext ts --exec ts-node src/app.ts\&quot;,\n    13\t    \&quot;dev-http\&quot;: \&quot;nodemon --ext ts --exec ts-node src/app-prod.ts\&quot;,\n    14\t    \&quot;typeorm\&quot;: \&quot;typeorm-ts-node-commonjs\&quot;,\n    15\t    \&quot;test:jest\&quot;: \&quot;jest\&quot;,\n    16\t    \&quot;migration:generate\&quot;: \&quot;ts-node --require dotenv/config ./node_modules/typeorm/cli.js migration:generate src/migration/migration/ -d src/db.ts\&quot;,\n...\nPath: src/routes/index.ts\n     1\timport { type Application } from 'express';\n     2\timport excelTemplate from './excel-template';\n     3\timport home from './home';\n     4\timport pendingNotification from './pending-notification';\n     5\timport teamVacation from './team-vacation';\n     6\timport userVacation from './user-vacation';\n     7\t\n     8\tconst registerRoutes = (app: Application) =&gt; {\n     9\t  userVacation(app);\n    10\t  teamVacation(app);\n    11\t  excelTemplate(app);\n    12\t  home(app);\n    13\t  pendingNotification(app);\n    14\t};\n    15\t\n    16\texport default { register: registerRoutes };\n...\nPath: src/listeners/events/index.ts\n     1\timport type { App } from '@slack/bolt';\n     2\timport appHomeOpenedCallback from './app-home-opened';\n     3\timport fileShared from './file-shared';\n     4\t\n     5\tconst register = (app: App) =&gt; {\n     6\t  app.event('app_home_opened', appHomeOpenedCallback);\n     7\t  app.event('file_shared', fileShared);\n     8\t};\n     9\t\n    10\texport default { register };\n...\nPath: src/listeners/index.ts\n     1\timport type { App } from '@slack/bolt';\n     2\timport actions from './actions';\n     3\timport commands from './commands';\n     4\timport events from './events';\n     5\timport messages from './messages';\n     6\timport shortcuts from './shortcuts';\n     7\timport views from './views';\n     8\t\n     9\tconst registerListeners = (app: App) =&gt; {\n    10\t  actions.register(app);\n    11\t  commands.register(app);\n    12\t  events.register(app);\n    13\t  messages.register(app);\n    14\t  shortcuts.register(app);\n    15\t  views.register(app);\n    16\t};\n    17\t\n    18\texport default registerListeners;\n...\nPath: src/listeners/events/file-shared.ts\n...\n     9\t\n    10\tconst fileShared = async ({\n    11\t  client,\n    12\t  event,\n    13\t  logger,\n    14\t  context,\n    15\t}: AllMiddlewareArgs&lt;AppContext&gt; &amp; SlackEventMiddlewareArgs&lt;'file_shared'&gt;) =&gt; {\n    16\t  try {\n    17\t    const fileId = event.file_id;\n    18\t    const fileInfo = await client.files.info({ file: fileId });\n    19\t\n    20\t    if (!fileInfo.file) {\n    21\t      return;\n    22\t    }\n    23\t\n    24\t    const fileUrl = fileInfo.file.url_private_download;\n    25\t\n    26\t    // download file\n    27\t    const response = await axios({\n    28\t      method: 'get',\n    29\t      url: fileUrl,\n    30\t      headers: {\n    31\t        Authorization: `Bearer ${context.botToken}`,\n    32\t      },\n    33\t      responseType: 'arraybuffer',\n    34\t    });\n    35\t\n    36\t    if (response.status !== 200) {\n    37\t      logger.error(`Failed to download file: ${response.statusText}`);\n    38\t      return;\n    39\t    }\n...\n    83\t\n    84\t    await client.chat.postMessage({\n    85\t      channel: event.channel_id,\n    86\t      text: `✅ ${t(context.locale, 'users_updated_success', { count: updatedCount.toString() })}`,\n    87\t    });\n    88\t  } catch (error) {\n    89\t    const errorMessage = error instanceof Error ? error.message : String(error);\n    90\t\n    91\t    await client.chat.postMessage({\n    92\t      channel: event.channel_id,\n    93\t      text: t(context.locale, 'file_shared_error', { message: errorMessage }),\n    94\t    });\n    95\t\n    96\t    logger.error(errorMessage);\n    97\t  }\n    98\t};\n    99\t\n   100\texport default fileShared;\n...\nPath: src/routes/home.ts\n     1\timport { type Application, Request, Response } from 'express';\n     2\t\n     3\texport default (app: Application) =&gt; {\n     4\t  app.get('/', async (req: Request, res: Response) =&gt; {\n     5\t    const html = `\n     6\t    &lt;!DOCTYPE html&gt;\n     7\t    &lt;html lang=\&quot;en\&quot;&gt;\n     8\t      &lt;head&gt;&lt;title&gt;Hello VacayBuddy&lt;/title&gt;&lt;/head&gt;\n     9\t      &lt;body&gt;\n    10\t        &lt;h1&gt;Hello VacayBuddy&lt;/h1&gt;\n    11\t        &lt;button onclick=\&quot;window.location.href='/slack/install'\&quot;&gt;Install&lt;/button&gt;\n    12\t      &lt;/body&gt;\n    13\t    &lt;/html&gt;\n    14\t  `;\n    15\t    res.set('Content-Type', 'text/html');\n    16\t    res.send(html);\n    17\t  });\n    18\t};\n...\nPath: jest.config.js\n     1\tmodule.exports = {\n     2\t  preset: 'ts-jest',\n     3\t  testEnvironment: 'node',\n     4\t  roots: ['&lt;rootDir&gt;'],\n     5\t  testMatch: ['**/*.spec.ts', '**/*.test.ts'],\n     6\t  transform: {\n     7\t    '^.+\\\\.tsx?$': ['ts-jest', {\n     8\t      tsconfig: 'tsconfig.jest.json'\n     9\t    }]\n    10\t  },\n    11\t  setupFilesAfterEnv: [\&quot;&lt;rootDir&gt;/tests/config/setup.ts\&quot;],\n    12\t  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],\n    13\t  testTimeout: 15000,\n    14\t};...\nPath: src/routes/excel-template.ts\n...\n     5\t\n     6\texport default (app: Application) =&gt; {\n     7\t  app.get('/download-excel-template', async (req: Request, res: Response) =&gt; {\n     8\t    const { token } = req.query;\n     9\t\n    10\t    if (!token || typeof token !== 'string') {\n    11\t      res.status(400).send('Invalid token');\n    12\t      return;\n    13\t    }\n    14\t\n    15\t    let decoded: { organizationId: string };\n    16\t    try {\n    17\t      decoded = jwt.verify(token, process.env.JWT_SECRET || 'default-secret-key') as { organizationId: string };\n    18\t    } catch (error) {\n    19\t      res.status(401).send('Invalid token');\n    20\t      return;\n    21\t    }\n    22\t\n    23\t    const { organizationId } = decoded;\n    24\t\n    25\t    const users = await organizationService.getUsers(organizationId);\n    26\t\n    27\t    if (users.length === 0) {\n    28\t      res.status(404).send('No users found for this organization');\n    29\t      return;\n    30\t    }\n...\nPath: src/i18n/index.ts\n     1\timport i18next from 'i18next';\n     2\timport { LOCALE_TO_LANG } from '../constants';\n     3\timport enUS from './en-US';\n     4\timport koKR from './ko-KR';\n     5\t\n     6\texport const i18nInitPromise = i18next.init({\n     7\t  lng: 'en-US',\n     8\t  fallbackLng: 'en-US',\n     9\t  resources: {\n    10\t    'en-US': { translation: enUS },\n    11\t    'ko-KR': { translation: koKR },\n    12\t  },\n    13\t  interpolation: {\n    14\t    escapeValue: false,\n    15\t  },\n    16\t});\n    17\t\n    18\texport function t(locale: keyof typeof LOCALE_TO_LANG, key: string, params?: Record&lt;string, string&gt;) {\n    19\t  return i18next.t(key, {\n    20\t    lng: locale,\n    21\t    ...params,\n    22\t  });\n    23\t}\n    24\t\n    25\texport { i18next };\n...\nPath: manifest.json\n...\n    38\t    \&quot;settings\&quot;: {\n    39\t        \&quot;event_subscriptions\&quot;: {\n    40\t            \&quot;bot_events\&quot;: [\n    41\t                \&quot;app_home_opened\&quot;,\n    42\t                \&quot;message.channels\&quot;,\n    43\t                \&quot;message.groups\&quot;,\n    44\t                \&quot;message.im\&quot;,\n    45\t                \&quot;message.mpim\&quot;,\n    46\t                \&quot;file_shared\&quot;\n    47\t            ]\n    48\t        },\n    49\t        \&quot;interactivity\&quot;: {\n    50\t            \&quot;is_enabled\&quot;: true\n    51\t        },\n    52\t        \&quot;org_deploy_enabled\&quot;: false,\n    53\t        \&quot;socket_mode_enabled\&quot;: true,\n    54\t        \&quot;token_rotation_enabled\&quot;: false\n    55\t    }\n    56\t}...\nPath: src/listeners/messages/index.ts\n     1\timport type { App } from '@slack/bolt';\n     2\timport sendWelcomeMessage from './send-welcome-message';\n     3\t\n     4\tconst register = (app: App) =&gt; {\n     5\t  app.message(/.*/, sendWelcomeMessage);\n     6\t};\n     7\t\n     8\texport default { register };\n...\nPath: src/db.ts\n...\n     7\t\n     8\tfunction getDataSourceConfig(): DataSourceOptions {\n     9\t  const dbType = process.env.DB_TYPE || 'sqlite';\n    10\t\n    11\t  const baseConfig: Partial&lt;DataSourceOptions&gt; = {\n    12\t    entities: [entitiesPath],\n    13\t    migrations: [migrationsPath],\n    14\t    synchronize: process.env.DB_SYNC === 'true',\n    15\t    logging: process.env.DB_LOGGING === 'true',\n    16\t    namingStrategy: new SnakeNamingStrategy(),\n    17\t  };\n    18\t\n    19\t  if (dbType === 'mysql') {\n    20\t    return {\n    21\t      ...baseConfig,\n    22\t      type: 'mysql',\n    23\t      host: process.env.DB_HOST || 'localhost',\n    24\t      port: Number.parseInt(process.env.DB_PORT || '3306', 10),\n    25\t      username: process.env.DB_USERNAME,\n    26\t ...&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;d9502991-c04c-400b-be0a-55d65fad6c15;toolu_01Tx9sKS36yxHyyLJa4t79eW&quot;:{&quot;requestId&quot;:&quot;d9502991-c04c-400b-be0a-55d65fad6c15&quot;,&quot;toolUseId&quot;:&quot;toolu_01Tx9sKS36yxHyyLJa4t79eW&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;The following code sections were retrieved:\nPath: src/app.ts\n     1\timport 'reflect-metadata';\n     2\timport { config } from 'dotenv';\n     3\t\n     4\tconfig();\n     5\t\n     6\timport { App, type Context, LogLevel } from '@slack/bolt';\n     7\timport { dataSource } from './db';\n     8\timport type { Organization } from './entity/organization.model';\n     9\timport type { User } from './entity/user.model';\n    10\timport { i18nInitPromise } from './i18n';\n    11\timport registerListeners from './listeners';\n    12\timport registerMiddleware from './middleware';\n    13\t\n    14\texport interface AppContext extends Context {\n    15\t  locale: string;\n    16\t  organization: Organization;\n    17\t  user: User;\n    18\t}\n    19\t\n    20\tconst app = new App({\n    21\t  token: process.env.SLACK_BOT_TOKEN,\n    22\t  appToken: process.env.SLACK_APP_TOKEN,\n    23\t  signingSecret: process.env.SLACK_SIGNING_SECRET,\n    24\t  socketMode: true,\n    25\t  logLevel: LogLevel.DEBUG,\n    26\t});\n    27\t\n    28\t/** Register listeners and middleware */\n    29\tregisterListeners(app);\n    30\tregisterMiddleware(app);\n    31\t\n    32\t/** Start Bolt App */\n    33\t(async () =&gt; {\n    34\t  try {\n    35\t    await i18nInitPromise;\n    36\t    await dataSource.initialize();\n    37\t    await app.start(process.env.PORT || 3000);\n    38\t    app.logger.info('⚡️ Bolt app is running! ⚡️');\n    39\t  } catch (error) {\n    40\t    app.logger.error('Unable to start App', error);\n    41\t  }\n    42\t})();\n...\nPath: src/app-prod.ts\n     1\timport 'reflect-metadata';\n     2\timport { config } from 'dotenv';\n     3\t\n     4\tconfig();\n     5\t\n     6\timport { App } from '@slack/bolt';\n     7\timport { dataSource } from './db';\n     8\timport { i18nInitPromise } from './i18n';\n     9\timport registerListeners from './listeners';\n    10\timport registerMiddleware from './middleware';\n    11\timport receiver from './receiver';\n    12\t\n    13\tconst app = new App({\n    14\t  receiver,\n    15\t});\n    16\t\n    17\t/** Register Listeners */\n    18\tregisterListeners(app);\n    19\tregisterMiddleware(app);\n    20\t\n    21\t/** Start Bolt App */\n    22\t(async () =&gt; {\n    23\t  try {\n    24\t    await i18nInitPromise;\n    25\t    await dataSource.initialize();\n    26\t    await app.start(process.env.PORT || 3000);\n    27\t    app.logger.info('⚡️ Bolt app is running! ⚡️');\n    28\t  } catch (error) {\n    29\t    app.logger.error('Unable to start App', error);\n    30\t  }\n    31\t})();\n...\nPath: src/routes/user-vacation.ts\n...\n    15\t\n    16\t    let decoded: { organizationId: string; userId: string };\n    17\t    try {\n    18\t      decoded = jwt.verify(token, process.env.JWT_SECRET || 'default-secret-key') as {\n    19\t        organizationId: string;\n    20\t        userId: string;\n    21\t      };\n    22\t    } catch (error) {\n    23\t      if (error instanceof jwt.TokenExpiredError) {\n    24\t        const html = `\n    25\t    &lt;!DOCTYPE html&gt;\n    26\t    &lt;html lang=\&quot;ko\&quot;&gt;\n    27\t    &lt;head&gt;\n    28\t      &lt;meta charset=\&quot;UTF-8\&quot;&gt;\n    29\t      &lt;title&gt;만료된 접근&lt;/title&gt;\n    30\t      &lt;style&gt;${expiredTokenStyles}&lt;/style&gt;\n    31\t    &lt;/head&gt;\n    32\t    &lt;body&gt;\n    33\t      &lt;div class=\&quot;container\&quot;&gt;\n    34\t        &lt;h1&gt;접근 시간이 만료되었습니다&lt;/h1&gt;\n    35\t        &lt;div class=\&quot;message\&quot;&gt;\n    36\t          &lt;p&gt;보안상의 이유로 접근 링크가 1시간 후에 만료됩니다.&lt;/p&gt;\n    37\t          &lt;p&gt;슬랙에서 다시 접근해 주세요.&lt;/p&gt;\n    38\t        &lt;/div&gt;\n    39\t      &lt;/div&gt;\n    40\t    &lt;/body&gt;\n    41\t    &lt;/html&gt;\n    42\t    `;\n    43\t        res.set('Content-Type', 'text/html');\n    44\t        res.status(401).send(html);\n    45\t        return;\n    46\t      }\n    47\t\n    48\t      // For other token errors\n    49\t      res.status(401).send('Invalid token');\n    50\t      return;\n    51\t    }\n...\nPath: src/receiver.ts\n     1\timport path from 'node:path';\n     2\timport { ExpressReceiver, LogLevel } from '@slack/bolt';\n     3\timport { WebClient } from '@slack/web-api';\n     4\timport express from 'express';\n     5\timport { buildInstallMessage } from './listeners/events/slack-ui/build-install-message';\n     6\timport routes from './routes';\n     7\timport { organizationService, ptoService, userService } from './service';\n     8\timport { assert } from './utils';\n     9\t\n    10\tconst receiver = new ExpressReceiver({\n    11\t  logLevel: LogLevel.INFO,\n    12\t  signingSecret: process.env.SLACK_SIGNING_SECRET || '',\n    13\t  clientId: process.env.SLACK_CLIENT_ID,\n    14\t  clientSecret: process.env.SLACK_CLIENT_SECRET,\n    15\t  stateSecret: process.env.SLACK_STATE_SECRET,\n    16\t  scopes: process.env.SLACK_SCOPES?.split(',') || [],\n    17\t  installationStore: {\n    18\t    storeInstallation: async (installation) =&gt; {\n    19\t      const organizationId = installation.enterprise?.id || installation.team?.id;\n    20\t\n    21\t      assert(organizationId !== undefined, 'Organization ID is undefined');\n    22\t      assert(installation.bot !== undefined, 'Bot installation is undefined');\n    23\t      assert(installation.appId !== undefined, 'App ID is undefined');\n    24\t\n    25\t      const client = new WebClient(installation.bot.token);\n    26\t      const result = await client.users.info({\n    27\t        user: installation.user.id,\n    28\t        include_locale: true,\n    29\t      });\n    30\t\n    31\t      const locale = result.user?.locale || 'en-US';\n    32\t\n    33\t      const organization = await organizationService.getOrganization(organizationId);\n    34\t      if (organization) {\n    35\t        await organizationService.deleteOrganization(organizationId);\n    36\t      }\n    37\t\n    38\t      // create organization, user, and default pto templates\n    39\t      const newOrganization = await organizationService.createOrganization(\n    40\t        organizationId,\n    41\t        installation.isEnterpriseInstall !== undefined,\n    42\t        JSON.stringify(installation),\n    43\t      );\n    44\t      await ptoService.createDefaultPtoTemplates(locale, newOrganization);\n    45\t      const installer = await userService.getOrCreateUser(installation.user.id, newOrganization, true);\n    46\t\n    47\t      // Create users for all team members\n    48\t      await organizationService.importTeamMembers(installation.bot.token, newOrganization);\n    49\t\n    50\t      // send welcome message to the installer\n    51\t      await client.chat.postMessage({\n    52\t        channel: installer.userId,\n    53\t        text: `Hello &lt;@${installer.userId}&gt;! Thanks for installing the app!`,\n    54\t        blocks: buildInstallMessage(locale, newOrganization.organizationId, installation.appId),\n    55\t      });\n    56\t    },\n    57\t\n    58\t    fetchInstallation: async (installQuery) =&gt; {\n    59\t      const organizationId = installQuery.enterpriseId || installQuery.teamId;\n    60\t      assert(organizationId !== undefined, 'Organization ID is undefined');\n    61\t\n    62\t      const organization = await organizationService.getOrganization(organizationId);\n    63\t      assert(organization !== null, 'Organization not found');\n    64\t\n    65\t      return JSON.parse(organization.installation);\n    66\t    },\n    67\t    deleteInstallation: async (installQuery) =&gt; {\n    68\t      const organizationId = installQuery.enterpriseId || installQuery.teamId;\n    69\t      assert(organizationId !== undefined, 'Organization ID is undefined');\n    70\t      await organizationService.deleteOrganization(organizationId);\n    71\t    },\n    72\t  },\n    73\t  installerOptions: {\n    74\t    directInstall: true,\n    75\t    redirectUriPath: '/slack/oauth_redirect',\n    76\t  },\n    77\t});\n    78\t\n    79\t// Serve static assets (CSS, JS, fonts) from the public directory\n    80\treceiver.app.use('/assets', express.static(path.join(process.cwd(), 'public/assets')));\n    81\t\n    82\troutes.register(receiver.app);\n    83\t\n    84\texport default receiver;\n...\nPath: src/listeners/events/file-shared.ts\n...\n     9\t\n    10\tconst fileShared = async ({\n    11\t  client,\n    12\t  event,\n    13\t  logger,\n    14\t  context,\n    15\t}: AllMiddlewareArgs&lt;AppContext&gt; &amp; SlackEventMiddlewareArgs&lt;'file_shared'&gt;) =&gt; {\n    16\t  try {\n    17\t    const fileId = event.file_id;\n    18\t    const fileInfo = await client.files.info({ file: fileId });\n    19\t\n    20\t    if (!fileInfo.file) {\n    21\t      return;\n    22\t    }\n    23\t\n    24\t    const fileUrl = fileInfo.file.url_private_download;\n    25\t\n    26\t    // download file\n    27\t    const response = await axios({\n    28\t      method: 'get',\n    29\t      url: fileUrl,\n    30\t      headers: {\n    31\t        Authorization: `Bearer ${context.botToken}`,\n    32\t      },\n    33\t      responseType: 'arraybuffer',\n    34\t    });\n    35\t\n    36\t    if (response.status !== 200) {\n    37\t      logger.error(`Failed to download file: ${response.statusText}`);\n    38\t      return;\n    39\t    }\n...\n    83\t\n    84\t    await client.chat.postMessage({\n    85\t      channel: event.channel_id,\n    86\t      text: `✅ ${t(context.locale, 'users_updated_success', { count: updatedCount.toString() })}`,\n    87\t    });\n    88\t  } catch (error) {\n    89\t    const errorMessage = error instanceof Error ? error.message : String(error);\n    90\t\n    91\t    await client.chat.postMessage({\n    92\t      channel: event.channel_id,\n    93\t      text: t(context.locale, 'file_shared_error', { message: errorMessage }),\n    94\t    });\n    95\t\n    96\t    logger.error(errorMessage);\n    97\t  }\n    98\t};\n    99\t\n   100\texport default fileShared;\n...\nPath: src/listeners/events/index.ts\n     1\timport type { App } from '@slack/bolt';\n     2\timport appHomeOpenedCallback from './app-home-opened';\n     3\timport fileShared from './file-shared';\n     4\t\n     5\tconst register = (app: App) =&gt; {\n     6\t  app.event('app_home_opened', appHomeOpenedCallback);\n     7\t  app.event('file_shared', fileShared);\n     8\t};\n     9\t\n    10\texport default { register };\n...\nPath: src/routes/team-vacation.ts\n...\n    14\t\n    15\t    let decoded: { organizationId: string; userId?: string };\n    16\t    try {\n    17\t      decoded = jwt.verify(token, process.env.JWT_SECRET || 'default-secret-key') as {\n    18\t        organizationId: string;\n    19\t        userId?: string;\n    20\t      };\n    21\t    } catch (error) {\n    22\t      if (error instanceof jwt.TokenExpiredError) {\n    23\t        const html = `\n    24\t    &lt;!DOCTYPE html&gt;\n    25\t    &lt;html lang=\&quot;ko\&quot;&gt;\n    26\t    &lt;head&gt;\n    27\t      &lt;meta charset=\&quot;UTF-8\&quot;&gt;\n    28\t      &lt;title&gt;만료된 접근&lt;/title&gt;\n    29\t      &lt;style&gt;${expiredTokenStyles}&lt;/style&gt;\n    30\t    &lt;/head&gt;\n    31\t    &lt;body&gt;\n    32\t      &lt;div class=\&quot;container\&quot;&gt;\n    33\t        &lt;h1&gt;접근 시간이 만료되었습니다&lt;/h1&gt;\n    34\t        &lt;div class=\&quot;message\&quot;&gt;\n    35\t          &lt;p&gt;보안상의 이유로 접근 링크가 1시간 후에 만료됩니다.&lt;/p&gt;\n    36\t          &lt;p&gt;슬랙 \&quot;팀 연차 현황 보기 버튼\&quot;을 통해 다시 접근해 주세요.&lt;/p&gt;\n    37\t        &lt;/div&gt;\n    38\t      &lt;/div&gt;\n    39\t    &lt;/body&gt;\n    40\t    &lt;/html&gt;\n    41\t    `;\n    42\t        res.set('Content-Type', 'text/html');\n    43\t        res.status(401).send(html);\n    44\t        return;\n    45\t      }\n    46\t\n    47\t      // For other token errors\n    48\t      res.status(401).send('Invalid token');\n    49\t      return;\n    50\t    }\n...\nPath: src/middleware.ts\n     1\timport type { AllMiddlewareArgs, App } from '@slack/bolt';\n     2\timport type { AppContext } from './app';\n     3\timport type { Organization } from './entity/organization.model';\n     4\timport { organizationService, userService } from './service';\n     5\timport { assert } from './utils';\n     6\t\n     7\tconst loadAppContext = async ({ context, client, next }: AllMiddlewareArgs&lt;AppContext&gt;) =&gt; {\n     8\t  const organizationId = context.teamId || context.enterpriseId;\n     9\t  assert(organizationId !== undefined, 'Organization ID is undefined');\n    10\t\n    11\t  if (!organizationId || !context.userId) {\n    12\t    return await next();\n    13\t  }\n    14\t\n    15\t  const organization: Organization = await organizationService.getOrCreateOrganization(\n    16\t    organizationId,\n    17\t    context.enterpriseId !== undefined,\n    18\t  );\n    19\t\n    20\t  const result = await client.users.info({\n    21\t    user: context.userId,\n    22\t    include_locale: true,\n    23\t  });\n    24\t\n    25\t  context.locale = result.user?.locale ?? 'en-US';\n    26\t  context.organization = organization;\n    27\t  context.user = await userService.getOrCreateUser(context.userId, context.organization);\n    28\t\n    29\t  if (context.user.name !== result.user?.real_name) {\n    30\t    context.user.name = result.user?.real_name ?? '';\n    31\t    await userService.updateUser(context.userId, {\n    32\t      ...context.user,\n    33\t      name: context.user.name,\n    34\t    });\n    35\t  }\n    36\t\n    37\t  await next();\n    38\t};\n    39\t\n    40\tconst registerMiddleware = (app: App) =&gt; {\n    41\t  app.use(loadAppContext);\n    42\t};\n    43\t\n    44\texport default registerMiddleware;\n...\nPath: src/listeners/index.ts\n     1\timport type { App } from '@slack/bolt';\n     2\timport actions from './actions';\n     3\timport commands from './commands';\n     4\timport events from './events';\n     5\timport messages from './messages';\n     6\timport shortcuts from './shortcuts';\n     7\timport views from './views';\n     8\t\n     9\tconst registerListeners = (app: App) =&gt; {\n    10\t  actions.register(app);\n    11\t  commands.register(app);\n    12\t  events.register(app);\n    13\t  messages.register(app);\n    14\t  shortcuts.register(app);\n    15\t  views.register(app);\n    16\t};\n    17\t\n    18\texport default registerListeners;\n...\nPath: src/listeners/events/app-home-opened.ts\n...\n     8\t\n     9\tconst appHomeOpenedCallback = async ({\n    10\t  client,\n    11\t  event,\n    12\t  logger,\n    13\t  context,\n    14\t}: AllMiddlewareArgs&lt;AppContext&gt; &amp; SlackEventMiddlewareArgs&lt;'app_home_opened'&gt;) =&gt; {\n    15\t  if (event.tab !== 'messages') {\n    16\t    return;\n    17\t  }\n    18\t\n    19\t  const admins = await organizationService.getAdmins(context.organization);\n    20\t  const blocks: AnyBlock[] = await buildAppHome(context, showAdminSection(context.user, admins));\n    21\t\n    22\t  const view: HomeView = {\n    23\t    type: 'home',\n    24\t    blocks: blocks,\n    25\t  };\n    26\t\n    27\t  await client.views.publish({\n    28\t    user_id: event.user,\n    29\t    view,\n    30\t  });\n    31\t};\n    32\t\n    33\texport default appHomeOpenedCallback;\n...\nPath: src/listeners/actions/update-back-to-home.ts\n...\n     8\t\n     9\texport const updateBackToHome = async ({\n    10\t  ack,\n    11\t  client,\n    12\t  body,\n    13\t  context,\n    14\t}: AllMiddlewareArgs&lt;AppContext&gt; &amp; SlackActionMiddlewareArgs&lt;BlockAction&gt;) =&gt; {\n    15\t  await ack();\n    16\t\n    17\t  const admins = await organizationService.getAdmins(context.organization);\n    18\t  const blocks: AnyBlock[] = await buildAppHome(context, showAdminSection(context.user, admins));\n    19\t  const view: HomeView = {\n    20\t    type: 'home',\n    21\t    blocks: blocks,\n    22\t  };\n    23\t\n    24\t  await client.views.publish({\n    25\t    user_id: body.user.id,\n    26\t    view,\n    27\t  });\n    28\t};\n...\nPath: src/listeners/actions/open-admin-modal.ts\n...\n     7\t\n     8\texport const openAdminModal = async ({\n     9\t  ack,\n    10\t  client,\n    11\t  body,\n    12\t  context,\n    13\t}: AllMiddlewareArgs&lt;AppContext&gt; &amp; SlackActionMiddlewareArgs&lt;BlockAction&gt;) =&gt; {\n    14\t  await ack();\n    15\t\n    16\t  const currentAdmins = await organizationService.getAdmins(context.organization);\n    17\t  const blocks = await buildAdminModal(context, currentAdmins);\n    18\t\n    19\t  await client.views.open({\n    20\t    trigger_id: body.trigger_id,\n    21\t    view: {\n    22\t      type: 'modal',\n    23\t      callback_id: ActionId.SUBMIT_ADMIN_MANAGE,\n    24\t      title: { type: 'plain_text', text: t(context.locale, 'manage_admins_title') },\n    25\t      blocks: blocks,\n    26\t      submit: {\n    27\t        type: 'plain_text',\n    28\t        text: t(context.locale, 'submit'),\n    29\t      },\n    30\t      close: {\n    31\t        type: 'plain_text',\n    32\t        text: t(context.locale, 'cancel'),\n    33\t      },\n    34\t    },\n    35\t  });\n    36\t};\n...\nPath: src/listeners/messages/index.ts\n     1\timport type { App } from '@slack/bolt';\n     2\timport sendWelcomeMessage from './send-welcome-message';\n     3\t\n     4\tconst register = (app: App) =&gt; {\n     5\t  app.message(/.*/, sendWelcomeMessage);\n     6\t};\n     7\t\n     8\texport default { register };\n...\nPath: package.json\n     1\t{\n     2\t  \&quot;name\&quot;: \&quot;vacaybuddy\&quot;,\n     3\t  \&quot;version\&quot;: \&quot;1.0.0\&quot;,\n     4\t  \&quot;description\&quot;: \&quot;A Slack app for easily requesting, approving, and managing PTO directly within Slack\&quot;,\n     5\t  \&quot;main\&quot;: \&quot;dist/app.js\&quot;,\n     6\t  \&quot;scripts\&quot;: {\n     7\t    \&quot;build\&quot;: \&quot;tsc\&quot;,\n     8\t    \&quot;start\&quot;: \&quot;npm run build &amp;&amp; node ./dist/src/app-prod.js\&quot;,\n     9\t    \&quot;lint\&quot;: \&quot;npx @biomejs/biome check src\&quot;,\n    10\t    \&quot;lint:fix\&quot;: \&quot;npx @biomejs/biome check --write src\&quot;,\n    11\t    \&quot;test\&quot;: \&quot;npm run build &amp;&amp; npm run lint &amp;&amp; npm run test:jest\&quot;,\n    12\t    \&quot;dev-socket\&quot;: \&quot;nodemon --ext ts --exec ts-node src/app.ts\&quot;,\n    13\t    \&quot;dev-http\&quot;: \&quot;nodemon --ext ts --exec ts-node src/app-prod.ts\&quot;,\n    14\t    \&quot;typeorm\&quot;: \&quot;typeorm-ts-node-commonjs\&quot;,\n    15\t    \&quot;test:jest\&quot;: \&quot;jest\&quot;,\n    16\t    \&quot;migration:generate\&quot;: \&quot;ts-node --require dotenv/config ./node_modules/typeorm/cli.js migration:generate src/migration/migration/ -d src/db.ts\&quot;,\n...\nPath: manifest.json\n...\n    38\t    \&quot;settings\&quot;: {\n    39\t        \&quot;event_subscriptions\&quot;: {\n    40\t            \&quot;bot_events\&quot;: [\n    41\t                \&quot;app_home_opened\&quot;,\n    42\t                \&quot;message.channels\&quot;,\n    43\t                \&quot;message.groups\&quot;,\n    44\t                \&quot;message.im\&quot;,\n    45\t                \&quot;message.mpim\&quot;,\n    46\t                \&quot;file_shared\&quot;\n    47\t            ]\n    48\t        },\n    49\t        \&quot;interactivity\&quot;: {\n    50\t            \&quot;is_enabled\&quot;: true\n    51\t        },\n    52\t        \&quot;org_deploy_enabled\&quot;: false,\n    53\t        \&quot;socket_mode_enabled\&quot;: true,\n    54\t        \&quot;token_rotation_enabled\&quot;: false\n    55\t    }\n    56\t}...\nPath: src/listeners/commands/sample-command.ts\n     1\timport type { AllMiddlewareArgs, SlackCommandMiddlewareArgs } from '@slack/bolt';\n     2\t\n     3\tconst sampleCommandCallback = async ({ ack, respond, logger }: AllMiddlewareArgs &amp; SlackCommandMiddlewareArgs) =&gt; {\n     4\t  try {\n     5\t    await ack();\n     6\t    await respond('Responding to the sample command!');\n     7\t  } catch (error) {\n     8\t    logger.error(error);\n     9\t  }\n    10\t};\n    11\t\n    12\texport default sampleCommandCallback;\n...\nPath: src/listeners/views/index.ts\n     1\timport type { App } from '@slack/bolt';\n     2\timport { ActionId } from '../../constants';\n     3\timport submitAdminManage from './submit-admin-manage';\n     4\timport submitDecisionRequest from './submit-decision-request';\n     5\timport submitPtoRequest from './submit-pto-request';\n     6\timport submitPtoTemplateManage from './submit-pto-template-manage';\n     7\t\n     8\tconst register = (app: App) =&gt; {\n     9\t  app.view(ActionId.SUBMIT_ADMIN_MANAGE, submitAdminManage);\n    10\t  app.view(ActionId.SUBMIT_PTO_TEMPLATE_MANAGE, submitPtoTemplateManage);\n    11\t  app.view(ActionId.SUBMIT_PTO_REQUEST, submitPtoRequest);\n    12\t  app.view(ActionId.SUBMIT_DECISION_REQUEST, submitDecisionRequest);\n    13\t};\n    14\t\n    15\texport default { register };\n...\nPath: src/listeners/views/submit-decision-request.ts\n...\n    52\t\n    53\t  // Notify requester of the decision\n    54\t  await client.chat.postMessage({\n    55\t    channel: approval.ptoRequest.user.userId,\n    56\t    blocks: buildDecisionSection(context, approval.ptoRequest),\n    57\t  });\n    58\t\n    59\t  const admins = await organizationService.getAdmins(context.organization);\n    60\t  const blocks: AnyBlock[] = await buildAppHome(context, showAdminSection(context.user, admins));\n    61\t  const homeView: HomeView = {\n    62\t    type: 'home',\n    63\t    blocks: blocks,\n    64\t  };\n    65\t\n    66\t  await ack({\n    67\t    response_action: 'clear',\n    68\t  });\n    69\t\n    70\t  // if the request is from home tab, else it's from message\n    71\t  if (privateMetadata.viewId) {\n    72\t    await client.views.update({\n    73\t      view_id: privateMetadata.viewId,\n    74\t      hash: privateMetadata.viewHash,\n    75\t      view: homeView,\n    76\t    });\n    77\t  }\n    7...&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}}},&quot;draftExchange&quot;:{&quot;request_message&quot;:&quot;&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;}]},&quot;mentioned_items&quot;:[],&quot;status&quot;:&quot;draft&quot;},&quot;draftActiveContextIds&quot;:[&quot;/Users/user/WebstormProjects/vacay-buddy/package.json:L15-16&quot;,&quot;/Users/user/WebstormProjects/vacay-buddy/package.json&quot;,&quot;/Users/user/WebstormProjects/vacay-buddyfalsefalse&quot;,&quot;userGuidelines&quot;,&quot;agentMemories&quot;],&quot;requestIds&quot;:[],&quot;isPinned&quot;:false,&quot;isShareable&quot;:true,&quot;extraData&quot;:{&quot;isAgentConversation&quot;:true,&quot;hasDirtyEdits&quot;:false},&quot;personaType&quot;:0,&quot;rootTaskUuid&quot;:&quot;f4e29357-ce4e-41b0-9101-2092b5700e64&quot;}},&quot;agentExecutionMode&quot;:&quot;manual&quot;,&quot;isPanelCollapsed&quot;:true,&quot;displayedAnnouncements&quot;:[]}" />
      </map>
    </option>
  </component>
</project>